{"version":3,"file":"67.js","mappings":"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","sources":["webpack://novelsynth/./src/utils/ContentDetector.ts"],"sourcesContent":["import type { ContentAnalysis, SiteHandler } from \"../types\";\r\n\r\nexport class ContentDetector {\r\n  private static readonly MIN_WORD_COUNT = 500;\r\n  private static readonly WORDS_PER_MINUTE = 200;\r\n\r\n  static analyzeContent(handlers: SiteHandler[]): ContentAnalysis {\r\n    const url = window.location.href;\r\n    const domain = window.location.hostname;\r\n\r\n    // Find matching handler\r\n    const handler = handlers.find(\r\n      (h) => h.isEnabled && h.domains.some((d) => domain.includes(d))\r\n    );\r\n\r\n    let content = \"\";\r\n    let title = \"\";\r\n    let author = \"\";\r\n\r\n    if (handler) {\r\n      // Use specific handler selectors\r\n      content = this.extractTextFromSelector(\r\n        handler.selectors.content || \"body\"\r\n      );\r\n      title = this.extractTextFromSelector(handler.selectors.title || \"title\");\r\n      author = this.extractTextFromSelector(handler.selectors.author || \"\");\r\n    } else {\r\n      // Fallback to generic content detection\r\n      content = this.extractGenericContent();\r\n      title = document.title;\r\n    }\r\n\r\n    const wordCount = this.countWords(content);\r\n    const readingTime = Math.ceil(wordCount / this.WORDS_PER_MINUTE);\r\n    const isLongForm = wordCount >= this.MIN_WORD_COUNT;\r\n\r\n    const contentType = this.detectContentType(url, content, title);\r\n    const confidence = this.calculateConfidence(\r\n      handler,\r\n      wordCount,\r\n      contentType\r\n    );\r\n\r\n    return {\r\n      isLongForm,\r\n      contentType,\r\n      wordCount,\r\n      readingTime,\r\n      title: title || undefined,\r\n      author: author || undefined,\r\n      confidence,\r\n    };\r\n  }\r\n\r\n  private static extractTextFromSelector(selector: string): string {\r\n    if (!selector) return \"\";\r\n\r\n    const elements = document.querySelectorAll(selector);\r\n    return Array.from(elements)\r\n      .map((el) => el.textContent?.trim() || \"\")\r\n      .join(\" \")\r\n      .replace(/\\s+/g, \" \");\r\n  }\r\n\r\n  private static extractGenericContent(): string {\r\n    // Remove script, style, and other non-content elements\r\n    const clone = document.cloneNode(true) as Document;\r\n    const elementsToRemove = clone.querySelectorAll(\r\n      \"script, style, nav, header, footer, aside, .advertisement, .ads\"\r\n    );\r\n    elementsToRemove.forEach((el) => el.remove());\r\n\r\n    // Try to find main content areas\r\n    const contentSelectors = [\r\n      \"main\",\r\n      \"article\",\r\n      \".content\",\r\n      \".post-content\",\r\n      \".article-content\",\r\n      \".entry-content\",\r\n      \"#content\",\r\n      \".chapter-content\",\r\n      \".story-content\",\r\n    ];\r\n\r\n    for (const selector of contentSelectors) {\r\n      const element = clone.querySelector(selector);\r\n      if (element && element.textContent && element.textContent.length > 1000) {\r\n        return element.textContent.trim().replace(/\\s+/g, \" \");\r\n      }\r\n    }\r\n\r\n    // Fallback to body content\r\n    return clone.body?.textContent?.trim().replace(/\\s+/g, \" \") || \"\";\r\n  }\r\n\r\n  private static countWords(text: string): number {\r\n    return text.split(/\\s+/).filter((word) => word.length > 0).length;\r\n  }\r\n\r\n  private static detectContentType(\r\n    url: string,\r\n    content: string,\r\n    title: string\r\n  ): ContentAnalysis[\"contentType\"] {\r\n    const lowerUrl = url.toLowerCase();\r\n    const lowerTitle = title.toLowerCase();\r\n    const lowerContent = content.toLowerCase();\r\n\r\n    // Web novel detection\r\n    if (\r\n      lowerUrl.includes(\"novel\") ||\r\n      lowerUrl.includes(\"chapter\") ||\r\n      lowerUrl.includes(\"fanfiction\") ||\r\n      lowerUrl.includes(\"webnovel\") ||\r\n      lowerTitle.includes(\"chapter\") ||\r\n      /chapter\\s+\\d+/i.test(title)\r\n    ) {\r\n      return \"novel\";\r\n    }\r\n\r\n    // News detection\r\n    if (\r\n      lowerUrl.includes(\"news\") ||\r\n      lowerUrl.includes(\"article\") ||\r\n      /\\d{4}\\/\\d{2}\\/\\d{2}/.test(url) ||\r\n      lowerContent.includes(\"breaking news\") ||\r\n      lowerContent.includes(\"reuters\") ||\r\n      lowerContent.includes(\"associated press\")\r\n    ) {\r\n      return \"news\";\r\n    }\r\n\r\n    // Documentation detection\r\n    if (\r\n      lowerUrl.includes(\"docs\") ||\r\n      lowerUrl.includes(\"documentation\") ||\r\n      lowerUrl.includes(\"api\") ||\r\n      lowerUrl.includes(\"guide\") ||\r\n      lowerTitle.includes(\"documentation\")\r\n    ) {\r\n      return \"technical\";\r\n    }\r\n\r\n    // Blog detection\r\n    if (\r\n      lowerUrl.includes(\"blog\") ||\r\n      lowerUrl.includes(\"post\") ||\r\n      lowerContent.includes(\"posted by\") ||\r\n      lowerContent.includes(\"written by\")\r\n    ) {\r\n      return \"article\";\r\n    }\r\n\r\n    // Article detection (technical articles, tutorials, etc.)\r\n    if (\r\n      lowerUrl.includes(\"tutorial\") ||\r\n      lowerUrl.includes(\"howto\") ||\r\n      lowerUrl.includes(\"guide\") ||\r\n      lowerTitle.includes(\"how to\") ||\r\n      lowerTitle.includes(\"tutorial\")\r\n    ) {\r\n      return \"article\";\r\n    }\r\n\r\n    return \"generic\";\r\n  }\r\n\r\n  private static calculateConfidence(\r\n    handler: SiteHandler | undefined,\r\n    wordCount: number,\r\n    contentType: string\r\n  ): number {\r\n    let confidence = 0.5; // Base confidence\r\n\r\n    // Handler match increases confidence\r\n    if (handler) {\r\n      confidence += 0.3;\r\n    }\r\n\r\n    // Word count affects confidence\r\n    if (wordCount > 2000) {\r\n      confidence += 0.2;\r\n    } else if (wordCount > 1000) {\r\n      confidence += 0.1;\r\n    } // Content type detection affects confidence\r\n    if (contentType !== \"generic\") {\r\n      confidence += 0.2;\r\n    }\r\n\r\n    return Math.min(confidence, 1.0);\r\n  }\r\n}\r\n"],"names":["ContentDetector","analyzeContent","handlers","url","window","location","href","domain","hostname","handler","find","h","isEnabled","domains","some","d","includes","content","title","author","this","extractTextFromSelector","selectors","extractGenericContent","document","wordCount","countWords","readingTime","Math","ceil","WORDS_PER_MINUTE","isLongForm","MIN_WORD_COUNT","contentType","detectContentType","undefined","confidence","calculateConfidence","selector","elements","querySelectorAll","Array","from","map","el","textContent","trim","join","replace","clone","cloneNode","forEach","remove","contentSelectors","element","querySelector","length","body","text","split","filter","word","lowerUrl","toLowerCase","lowerTitle","lowerContent","test","min"],"sourceRoot":""}