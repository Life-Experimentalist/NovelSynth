(()=>{"use strict";class t{static async getSettings(){try{const t=(await chrome.storage.sync.get(this.STORAGE_KEY))[this.STORAGE_KEY];return t?{...this.DEFAULT_SETTINGS,...t}:this.DEFAULT_SETTINGS}catch(t){return console.error("Failed to load settings:",t),this.DEFAULT_SETTINGS}}static async saveSettings(t){try{const e={...await this.getSettings(),...t};return await chrome.storage.sync.set({[this.STORAGE_KEY]:e}),!0}catch(t){return console.error("Failed to save settings:",t),!1}}static async updateApiKey(t,e){try{const s=await this.getSettings();return s.apiKeys[t]=e,await this.saveSettings(s)}catch(t){return console.error("Failed to update API key:",t),!1}}static async removeApiKey(t){try{const e=await this.getSettings();return delete e.apiKeys[t],await this.saveSettings(e)}catch(t){return console.error("Failed to remove API key:",t),!1}}static async setSelectedProvider(t){return await this.saveSettings({selectedProvider:t})}static async setSelectedModel(t,e){try{const s={...(await this.getSettings()).selectedModels,[t]:e};return await this.saveSettings({selectedModels:s})}catch(t){return console.error("Failed to set selected model:",t),!1}}static async setSelectedModels(t){try{const e={...(await this.getSettings()).selectedModels,...t};return await this.saveSettings({selectedModels:e})}catch(t){return console.error("Failed to set selected models:",t),!1}}static async setCustomPrompt(t,e,s){try{const n=(await this.getSettings()).customPrompts||{enhancement:{},summary:{},permanent:{},website:{},novel:{}},a={...n};return a[t]={...n[t],[e]:s},await this.saveSettings({customPrompts:a})}catch(t){return console.error("Failed to set custom prompt:",t),!1}}static async removeCustomPrompt(t,e){try{const s=await this.getSettings();if(!s.customPrompts)return!0;const n={...s.customPrompts};return n[t]={...s.customPrompts[t]},delete n[t][e],await this.saveSettings({customPrompts:n})}catch(t){return console.error("Failed to remove custom prompt:",t),!1}}static async setRateLimitingSettings(t){try{const e={...(await this.getSettings()).rateLimiting,...t};return await this.saveSettings({rateLimiting:e})}catch(t){return console.error("Failed to set rate limiting settings:",t),!1}}static async setContentDetectionSettings(t){return await this.saveSettings(t)}static async toggleFeature(t){try{const e=[...(await this.getSettings()).enabledFeatures],s=e.indexOf(t);return s>=0?e.splice(s,1):e.push(t),await this.saveSettings({enabledFeatures:e})}catch(t){return console.error("Failed to toggle feature:",t),!1}}static async toggleHandler(t){try{const e=[...(await this.getSettings()).enabledHandlers],s=e.indexOf(t);return s>=0?e.splice(s,1):e.push(t),await this.saveSettings({enabledHandlers:e})}catch(t){return console.error("Failed to toggle handler:",t),!1}}static async clearAllData(){try{return await chrome.storage.sync.remove(this.STORAGE_KEY),!0}catch(t){return console.error("Failed to clear data:",t),!1}}static onSettingsChanged(t){chrome.storage.onChanged.addListener(((e,s)=>{if("sync"===s&&e[this.STORAGE_KEY]){const s=e[this.STORAGE_KEY].newValue;s&&t({...this.DEFAULT_SETTINGS,...s})}}))}static async storeContent(t,e,s,n){try{const a={pageUrl:t,originalContent:e,enhancedContent:s,timestamp:Date.now(),contentHash:this.generateContentHash(e),contentType:n.contentType,websiteId:n.websiteId},o=await this.getStoredContent();o[t]=a;const r=Object.entries(o);if(r.length>50){const t=r.sort(((t,e)=>e[1].timestamp-t[1].timestamp)),e=Object.fromEntries(t.slice(0,50));await chrome.storage.local.set({[this.CONTENT_STORAGE_KEY]:e})}else await chrome.storage.local.set({[this.CONTENT_STORAGE_KEY]:o});return!0}catch(t){return console.error("Failed to store content:",t),!1}}static async getStoredContentForUrl(t){try{return(await this.getStoredContent())[t]||null}catch(t){return console.error("Failed to retrieve content:",t),null}}static async getStoredContent(){try{return(await chrome.storage.local.get(this.CONTENT_STORAGE_KEY))[this.CONTENT_STORAGE_KEY]||{}}catch(t){return console.error("Failed to get stored content:",t),{}}}static async clearStoredContent(t){try{if(t){const e=await this.getStoredContent();delete e[t],await chrome.storage.local.set({[this.CONTENT_STORAGE_KEY]:e})}else await chrome.storage.local.remove(this.CONTENT_STORAGE_KEY);return!0}catch(t){return console.error("Failed to clear stored content:",t),!1}}static async getStorageStats(){try{const t=await this.getStoredContent(),e=Object.values(t),s=JSON.stringify(t).length,n=e.length,a=e.reduce(((t,e)=>e.timestamp<t.timestamp?e:t),e[0]),o=e.reduce(((t,e)=>e.timestamp>t.timestamp?e:t),e[0]);return{totalSize:s,totalItems:n,oldestItem:a?.timestamp||void 0,newestItem:o?.timestamp||void 0}}catch(t){return console.error("Failed to get storage stats:",t),{totalSize:0,totalItems:0}}}static async setToggleState(t,e){try{const s=await this.getToggleStates(),n=await this.getStoredContentForUrl(t);return s[t]={isShowingEnhanced:e,hasEnhancedContent:!!n?.enhancedContent,hasSummary:!!n?.summary,isProcessing:!1},await chrome.storage.local.set({novelsynth_toggle_states:s}),!0}catch(t){return console.error("Failed to set toggle state:",t),!1}}static async getToggleState(t){try{return(await this.getToggleStates())[t]||null}catch(t){return console.error("Failed to get toggle state:",t),null}}static async getToggleStates(){try{return(await chrome.storage.local.get("novelsynth_toggle_states")).novelsynth_toggle_states||{}}catch(t){return console.error("Failed to get toggle states:",t),{}}}static generateContentHash(t){let e=0;for(let s=0;s<t.length;s++)e=(e<<5)-e+t.charCodeAt(s),e&=e;return Math.abs(e).toString(16)}static async getLastUsedActions(){try{return(await chrome.storage.local.get("novelsynth_last_used_actions")).novelsynth_last_used_actions||["enhance","summarize"]}catch(t){return console.error("Failed to get last used actions:",t),["enhance","summarize"]}}static async setLastUsedActions(t){try{await chrome.storage.local.set({novelsynth_last_used_actions:t.slice(0,2)})}catch(t){console.error("Failed to set last used actions:",t)}}}t.STORAGE_KEY="novelsynth_settings",t.CONTENT_STORAGE_KEY="novelsynth_content",t.DEFAULT_SETTINGS={selectedProvider:"gemini",selectedModels:{enhance:"gemini-1.5-flash",summarize:"gemini-1.5-flash",analyze:"gemini-1.5-flash",suggestions:"gemini-1.5-flash"},apiKeys:{},enabledFeatures:["summarize","analyze","suggestions","enhance"],enabledHandlers:["FanFiction.Net","Archive of Our Own","Royal Road","WebNovel.com","GeeksforGeeks","Medium","Generic News"],theme:"auto",customPrompts:{enhancement:{},summary:{},permanent:{},website:{},novel:{}},autoDetectContentType:!0,showWordCount:!0,showProcessingBanner:!0,rateLimiting:{enabled:!0,waitTime:1e3,retryAttempts:3}},new class{constructor(){this.setupEventListeners(),this.setupContextMenus()}setupEventListeners(){chrome.runtime.onInstalled.addListener((t=>{"install"===t.reason?this.handleFirstInstall():"update"===t.reason&&this.handleUpdate(t.previousVersion)})),chrome.runtime.onMessage.addListener(((t,e,s)=>(this.handleMessage(t,e,s),!0))),chrome.contextMenus.onClicked.addListener(((t,e)=>{this.handleContextMenuClick(t,e)}))}setupContextMenus(){chrome.contextMenus.create({id:"enhance-content",title:"Enhance with NovelSynth",contexts:["selection","page"]}),chrome.contextMenus.create({id:"summarize-content",title:"Summarize with NovelSynth",contexts:["selection","page"]})}handleFirstInstall(){chrome.storage.sync.set({selectedProvider:"gemini",selectedModels:{enhance:"gemini-1.5-pro",summarize:"gemini-1.5-pro",analyze:"gemini-1.5-pro",suggestions:"gemini-1.5-pro"},autoDetectContentType:!0,showWordCount:!0,showProcessingBanner:!0,enabledFeatures:["enhance","summarize","analyze"]}),chrome.tabs.create({url:chrome.runtime.getURL("welcome.html")})}handleUpdate(t){console.log(`NovelSynth updated from ${t} to ${chrome.runtime.getManifest().version}`),t&&this.shouldMigrate(t)&&this.migrateSettings()}async handleMessage(e,s,n){try{switch(e.type){case"GET_SETTINGS":n({success:!0,data:await this.getSettings()});break;case"UPDATE_SETTINGS":await this.updateSettings(e.payload),n({success:!0});break;case"ENHANCE_CONTENT":await this.enhanceContent(s.tab?.id,e.payload),n({success:!0});break;case"GET_STORAGE_STATS":n({success:!0,data:await t.getStorageStats()});break;case"CLEAR_STORAGE":await t.clearStoredContent(),n({success:!0});break;default:n({success:!1,error:"Unknown message type"})}}catch(t){console.error("Background script error:",t),n({success:!1,error:t instanceof Error?t.message:"Unknown error"})}}async handleContextMenuClick(t,e){if(e?.id)switch(t.menuItemId){case"enhance-content":await chrome.tabs.sendMessage(e.id,{action:"enhanceContent",options:{useSelection:!!t.selectionText,selectedText:t.selectionText}});break;case"summarize-content":await chrome.tabs.sendMessage(e.id,{action:"summarizeContent",options:{useSelection:!!t.selectionText,selectedText:t.selectionText}})}}async getSettings(){return new Promise((t=>{chrome.storage.sync.get(null,t)}))}async updateSettings(t){return new Promise((e=>{chrome.storage.sync.set(t,e)}))}async enhanceContent(t,e){t&&await chrome.tabs.sendMessage(t,{action:"enhanceContent",options:e||{}})}shouldMigrate(t){return!1}async migrateSettings(){console.log("Migrating settings...")}},console.log("NovelSynth background script loaded")})();