{"version":3,"file":"content.js","mappings":"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","sources":["webpack://novelsynth/./src/utils/WordCounter.ts","webpack://novelsynth/./src/utils/ProcessingBanner.ts","webpack://novelsynth/./src/content/index.ts"],"sourcesContent":["export interface WordCountStats {\r\n  originalWords: number;\r\n  enhancedWords: number;\r\n  wordsChanged: number;\r\n  percentageChange: number;\r\n  charactersOriginal: number;\r\n  charactersEnhanced: number;\r\n}\r\n\r\nexport class WordCounter {\r\n  /**\r\n   * Count words in text content\r\n   */\r\n  static countWords(text: string): number {\r\n    if (!text || typeof text !== \"string\") {\r\n      return 0;\r\n    }\r\n\r\n    // Remove HTML tags and clean text\r\n    const cleanText = text\r\n      .replace(/<[^>]*>/g, \" \")\r\n      .replace(/\\s+/g, \" \")\r\n      .trim();\r\n\r\n    if (!cleanText) {\r\n      return 0;\r\n    }\r\n\r\n    // Split by whitespace and filter out empty strings\r\n    return cleanText.split(/\\s+/).filter((word) => word.length > 0).length;\r\n  }\r\n\r\n  /**\r\n   * Count characters in text content\r\n   */\r\n  static countCharacters(text: string): number {\r\n    if (!text || typeof text !== \"string\") {\r\n      return 0;\r\n    }\r\n\r\n    // Remove HTML tags and count characters\r\n    return text.replace(/<[^>]*>/g, \"\").length;\r\n  }\r\n\r\n  /**\r\n   * Calculate enhancement statistics\r\n   */\r\n  static calculateStats(\r\n    originalText: string,\r\n    enhancedText: string\r\n  ): WordCountStats {\r\n    const originalWords = this.countWords(originalText);\r\n    const enhancedWords = this.countWords(enhancedText);\r\n    const wordsChanged = enhancedWords - originalWords;\r\n    const percentageChange =\r\n      originalWords > 0 ? (wordsChanged / originalWords) * 100 : 0;\r\n\r\n    const charactersOriginal = this.countCharacters(originalText);\r\n    const charactersEnhanced = this.countCharacters(enhancedText);\r\n\r\n    return {\r\n      originalWords,\r\n      enhancedWords,\r\n      wordsChanged,\r\n      percentageChange: Math.round(percentageChange * 100) / 100, // Round to 2 decimal places\r\n      charactersOriginal,\r\n      charactersEnhanced,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format word count for display\r\n   */\r\n  static formatWordCount(count: number): string {\r\n    if (count < 1000) {\r\n      return count.toString();\r\n    } else if (count < 1000000) {\r\n      return (count / 1000).toFixed(1) + \"K\";\r\n    } else {\r\n      return (count / 1000000).toFixed(1) + \"M\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format percentage change for display\r\n   */\r\n  static formatPercentageChange(percentage: number): string {\r\n    const sign = percentage > 0 ? \"+\" : \"\";\r\n    return `${sign}${percentage.toFixed(1)}%`;\r\n  }\r\n\r\n  /**\r\n   * Format word change for display\r\n   */\r\n  static formatWordChange(change: number): string {\r\n    const sign = change > 0 ? \"+\" : \"\";\r\n    return `${sign}${this.formatWordCount(Math.abs(change))}`;\r\n  }\r\n\r\n  /**\r\n   * Get reading time estimate (assuming 200 words per minute)\r\n   */\r\n  static getReadingTime(wordCount: number): string {\r\n    const minutes = Math.round(wordCount / 200);\r\n\r\n    if (minutes < 1) {\r\n      return \"< 1 min\";\r\n    } else if (minutes < 60) {\r\n      return `${minutes} min`;\r\n    } else {\r\n      const hours = Math.floor(minutes / 60);\r\n      const remainingMinutes = minutes % 60;\r\n      return remainingMinutes > 0\r\n        ? `${hours}h ${remainingMinutes}m`\r\n        : `${hours}h`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract word count from page content\r\n   */\r\n  static extractContentWordCount(element: Element): number {\r\n    if (!element) {\r\n      return 0;\r\n    }\r\n\r\n    // Clone element to avoid modifying original\r\n    const clone = element.cloneNode(true) as Element;\r\n\r\n    // Remove navigation, ads, and other non-content elements\r\n    const elementsToRemove = [\r\n      \"nav\",\r\n      \"header\",\r\n      \"footer\",\r\n      \"aside\",\r\n      \".ads\",\r\n      \".navigation\",\r\n      \".breadcrumb\",\r\n      \".social\",\r\n      \".share\",\r\n      \".comments\",\r\n      \".author-bio\",\r\n    ];\r\n\r\n    elementsToRemove.forEach((selector) => {\r\n      const elements = clone.querySelectorAll(selector);\r\n      elements.forEach((el) => el.remove());\r\n    });\r\n\r\n    return this.countWords(clone.textContent || \"\");\r\n  }\r\n}\r\n","import { WordCounter, WordCountStats } from \"../utils/WordCounter\";\r\n\r\nexport interface BannerConfig {\r\n  provider: string;\r\n  model: string;\r\n  showWordCount: boolean;\r\n  showProcessingBanner: boolean;\r\n}\r\n\r\nexport class ProcessingBanner {\r\n  private bannerElement: HTMLElement | null = null;\r\n  private config: BannerConfig;\r\n\r\n  constructor(config: BannerConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Create and show initial banner with word count\r\n   */\r\n  showInitialBanner(contentElement: Element, wordCount: number): void {\r\n    if (!this.config.showProcessingBanner) {\r\n      return;\r\n    }\r\n\r\n    this.removeBanner();\r\n\r\n    const banner = this.createBannerElement();\r\n    const readingTime = WordCounter.getReadingTime(wordCount);\r\n\r\n    banner.innerHTML = `\r\n      <div class=\"novelsynth-banner-content\">\r\n        <div class=\"novelsynth-banner-header\">\r\n          <span class=\"novelsynth-banner-title\">📖 NovelSynth Ready</span>\r\n          <span class=\"novelsynth-banner-close\" title=\"Close\">&times;</span>\r\n        </div>\r\n        <div class=\"novelsynth-banner-stats\">\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Words:</span>\r\n            <span class=\"stat-value\">${WordCounter.formatWordCount(\r\n              wordCount\r\n            )}</span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Reading Time:</span>\r\n            <span class=\"stat-value\">${readingTime}</span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">AI Provider:</span>\r\n            <span class=\"stat-value\">${this.config.provider}</span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Model:</span>\r\n            <span class=\"stat-value\">${this.config.model}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    this.insertBanner(contentElement, banner);\r\n    this.setupBannerEvents(banner);\r\n  }\r\n\r\n  /**\r\n   * Show processing banner while AI is working\r\n   */\r\n  showProcessingBanner(contentElement: Element): void {\r\n    if (!this.config.showProcessingBanner) {\r\n      return;\r\n    }\r\n\r\n    this.removeBanner();\r\n\r\n    const banner = this.createBannerElement();\r\n    banner.classList.add(\"processing\");\r\n\r\n    banner.innerHTML = `\r\n      <div class=\"novelsynth-banner-content\">\r\n        <div class=\"novelsynth-banner-header\">\r\n          <span class=\"novelsynth-banner-title\">🤖 Enhancing Content...</span>\r\n          <div class=\"novelsynth-spinner\"></div>\r\n        </div>\r\n        <div class=\"novelsynth-banner-stats\">\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">AI Provider:</span>\r\n            <span class=\"stat-value\">${this.config.provider}</span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Model:</span>\r\n            <span class=\"stat-value\">${this.config.model}</span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Status:</span>\r\n            <span class=\"stat-value processing-text\">Processing...</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    this.insertBanner(contentElement, banner);\r\n  }\r\n\r\n  /**\r\n   * Show completion banner with enhancement stats\r\n   */\r\n  showCompletionBanner(\r\n    contentElement: Element,\r\n    stats: WordCountStats,\r\n    processingTime: number\r\n  ): void {\r\n    if (!this.config.showProcessingBanner) {\r\n      return;\r\n    }\r\n\r\n    this.removeBanner();\r\n\r\n    const banner = this.createBannerElement();\r\n    banner.classList.add(\"completed\");\r\n\r\n    const changeColor = stats.wordsChanged >= 0 ? \"positive\" : \"negative\";\r\n    const changeIcon = stats.wordsChanged >= 0 ? \"📈\" : \"📉\";\r\n\r\n    banner.innerHTML = `\r\n      <div class=\"novelsynth-banner-content\">\r\n        <div class=\"novelsynth-banner-header\">\r\n          <span class=\"novelsynth-banner-title\">✨ Enhancement Complete</span>\r\n          <span class=\"novelsynth-banner-close\" title=\"Close\">&times;</span>\r\n        </div>\r\n        <div class=\"novelsynth-banner-stats\">\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Original Words:</span>\r\n            <span class=\"stat-value\">${WordCounter.formatWordCount(\r\n              stats.originalWords\r\n            )}</span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Enhanced Words:</span>\r\n            <span class=\"stat-value\">${WordCounter.formatWordCount(\r\n              stats.enhancedWords\r\n            )}</span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Change:</span>\r\n            <span class=\"stat-value ${changeColor}\">\r\n              ${changeIcon} ${WordCounter.formatWordChange(stats.wordsChanged)}\r\n              (${WordCounter.formatPercentageChange(stats.percentageChange)})\r\n            </span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Processing Time:</span>\r\n            <span class=\"stat-value\">${(processingTime / 1000).toFixed(\r\n              1\r\n            )}s</span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"stat-label\">Provider:</span>\r\n            <span class=\"stat-value\">${this.config.provider} (${\r\n      this.config.model\r\n    })</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    this.insertBanner(contentElement, banner);\r\n    this.setupBannerEvents(banner);\r\n\r\n    // Auto-hide after 10 seconds\r\n    setTimeout(() => {\r\n      this.removeBanner();\r\n    }, 10000);\r\n  }\r\n\r\n  /**\r\n   * Show error banner\r\n   */\r\n  showErrorBanner(contentElement: Element, error: string): void {\r\n    if (!this.config.showProcessingBanner) {\r\n      return;\r\n    }\r\n\r\n    this.removeBanner();\r\n\r\n    const banner = this.createBannerElement();\r\n    banner.classList.add(\"error\");\r\n\r\n    banner.innerHTML = `\r\n      <div class=\"novelsynth-banner-content\">\r\n        <div class=\"novelsynth-banner-header\">\r\n          <span class=\"novelsynth-banner-title\">❌ Enhancement Failed</span>\r\n          <span class=\"novelsynth-banner-close\" title=\"Close\">&times;</span>\r\n        </div>\r\n        <div class=\"novelsynth-banner-error\">\r\n          <p>${error}</p>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    this.insertBanner(contentElement, banner);\r\n    this.setupBannerEvents(banner);\r\n\r\n    // Auto-hide after 8 seconds\r\n    setTimeout(() => {\r\n      this.removeBanner();\r\n    }, 8000);\r\n  }\r\n\r\n  /**\r\n   * Remove the current banner\r\n   */\r\n  removeBanner(): void {\r\n    if (this.bannerElement) {\r\n      this.bannerElement.remove();\r\n      this.bannerElement = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the base banner element\r\n   */\r\n  private createBannerElement(): HTMLElement {\r\n    const banner = document.createElement(\"div\");\r\n    banner.className = \"novelsynth-processing-banner\";\r\n    banner.innerHTML = this.getBannerStyles();\r\n    return banner;\r\n  }\r\n\r\n  /**\r\n   * Insert banner into the page\r\n   */\r\n  private insertBanner(contentElement: Element, banner: HTMLElement): void {\r\n    // Try to insert before content, or at the top of the page\r\n    const insertPoint = contentElement.parentElement || document.body;\r\n    insertPoint.insertBefore(banner, contentElement);\r\n    this.bannerElement = banner;\r\n  }\r\n\r\n  /**\r\n   * Setup banner event listeners\r\n   */\r\n  private setupBannerEvents(banner: HTMLElement): void {\r\n    const closeButton = banner.querySelector(\".novelsynth-banner-close\");\r\n    if (closeButton) {\r\n      closeButton.addEventListener(\"click\", () => {\r\n        this.removeBanner();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get banner CSS styles\r\n   */\r\n  private getBannerStyles(): string {\r\n    return `\r\n      <style>\r\n        .novelsynth-processing-banner {\r\n          position: relative;\r\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n          color: white;\r\n          padding: 16px 20px;\r\n          margin: 16px 0;\r\n          border-radius: 12px;\r\n          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n          z-index: 10000;\r\n          border: 2px solid rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .novelsynth-processing-banner.processing {\r\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n          animation: processingPulse 2s infinite;\r\n        }\r\n\r\n        .novelsynth-processing-banner.completed {\r\n          background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);\r\n        }\r\n\r\n        .novelsynth-processing-banner.error {\r\n          background: linear-gradient(135deg, #ff6b6b 0%, #ffa8a8 100%);\r\n        }\r\n\r\n        @keyframes processingPulse {\r\n          0%, 100% { opacity: 1; }\r\n          50% { opacity: 0.8; }\r\n        }\r\n\r\n        .novelsynth-banner-content {\r\n          max-width: 100%;\r\n        }\r\n\r\n        .novelsynth-banner-header {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          margin-bottom: 12px;\r\n        }\r\n\r\n        .novelsynth-banner-title {\r\n          font-size: 16px;\r\n          font-weight: 600;\r\n          margin: 0;\r\n        }\r\n\r\n        .novelsynth-banner-close {\r\n          cursor: pointer;\r\n          font-size: 20px;\r\n          font-weight: bold;\r\n          opacity: 0.7;\r\n          transition: opacity 0.2s;\r\n          padding: 0 4px;\r\n        }\r\n\r\n        .novelsynth-banner-close:hover {\r\n          opacity: 1;\r\n        }\r\n\r\n        .novelsynth-banner-stats {\r\n          display: grid;\r\n          grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n          gap: 12px;\r\n          margin-bottom: 8px;\r\n        }\r\n\r\n        .stat-item {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          background: rgba(255, 255, 255, 0.1);\r\n          padding: 8px 12px;\r\n          border-radius: 6px;\r\n          backdrop-filter: blur(10px);\r\n        }\r\n\r\n        .stat-label {\r\n          font-size: 13px;\r\n          opacity: 0.9;\r\n          font-weight: 500;\r\n        }\r\n\r\n        .stat-value {\r\n          font-size: 13px;\r\n          font-weight: 600;\r\n        }\r\n\r\n        .stat-value.positive {\r\n          color: #4ade80;\r\n        }\r\n\r\n        .stat-value.negative {\r\n          color: #f87171;\r\n        }\r\n\r\n        .processing-text {\r\n          animation: processingDots 1.5s infinite;\r\n        }\r\n\r\n        @keyframes processingDots {\r\n          0% { content: 'Processing'; }\r\n          33% { content: 'Processing.'; }\r\n          66% { content: 'Processing..'; }\r\n          100% { content: 'Processing...'; }\r\n        }\r\n\r\n        .novelsynth-spinner {\r\n          width: 16px;\r\n          height: 16px;\r\n          border: 2px solid rgba(255, 255, 255, 0.3);\r\n          border-top: 2px solid white;\r\n          border-radius: 50%;\r\n          animation: spin 1s linear infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n          0% { transform: rotate(0deg); }\r\n          100% { transform: rotate(360deg); }\r\n        }\r\n\r\n        .novelsynth-banner-error {\r\n          background: rgba(255, 255, 255, 0.1);\r\n          padding: 12px;\r\n          border-radius: 6px;\r\n          margin-top: 8px;\r\n        }\r\n\r\n        .novelsynth-banner-error p {\r\n          margin: 0;\r\n          font-size: 14px;\r\n          line-height: 1.4;\r\n        }\r\n\r\n        @media (max-width: 768px) {\r\n          .novelsynth-banner-stats {\r\n            grid-template-columns: 1fr;\r\n          }\r\n\r\n          .novelsynth-processing-banner {\r\n            margin: 8px;\r\n            padding: 12px 16px;\r\n          }\r\n        }\r\n      </style>\r\n    `;\r\n  }\r\n}\r\n","import type { ExtensionMessage, ContentAnalysis, UserSettings } from \"../types\";\r\nimport { ProcessingBanner } from \"../utils/ProcessingBanner\";\r\nimport { WordCounter } from \"../utils/WordCounter\";\r\n\r\nclass ContentScript {\r\n  private isInitialized = false;\r\n  private analysis: ContentAnalysis | null = null;\r\n  private novelSynthUI: HTMLElement | null = null;\r\n  private processingBanner: ProcessingBanner | null = null;\r\n  private settings: UserSettings | null = null;\r\n\r\n  constructor() {\r\n    this.init();\r\n  }\r\n\r\n  private async init(): Promise<void> {\r\n    if (this.isInitialized) return;\r\n\r\n    // Wait for page to be fully loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", () => this.initialize());\r\n    } else {\r\n      await this.initialize();\r\n    }\r\n  }\r\n  private async initialize(): Promise<void> {\r\n    try {\r\n      // Load user settings\r\n      await this.loadSettings();\r\n\r\n      // Initialize processing banner if settings are available\r\n      if (this.settings) {\r\n        this.processingBanner = new ProcessingBanner({\r\n          provider: this.settings.selectedProvider,\r\n          model: this.settings.selectedModels.enhance, // Default to enhance model\r\n          showWordCount: this.settings.showWordCount,\r\n          showProcessingBanner: this.settings.showProcessingBanner,\r\n        });\r\n      }\r\n\r\n      // Analyze current page content\r\n      await this.analyzeCurrentPage();\r\n\r\n      // Only show UI if content is detected as long-form\r\n      if (this.analysis?.isLongForm) {\r\n        this.createNovelSynthUI();\r\n      }\r\n\r\n      this.isInitialized = true;\r\n      console.log(\"NovelSynth content script initialized\");\r\n    } catch (error) {\r\n      console.error(\"Failed to initialize NovelSynth:\", error);\r\n    }\r\n  }\r\n\r\n  private async loadSettings(): Promise<void> {\r\n    try {\r\n      const response = await this.sendMessage({\r\n        type: \"GET_SETTINGS\",\r\n        payload: {},\r\n      });\r\n\r\n      if (response.success) {\r\n        this.settings = response.settings;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to load settings:\", error);\r\n    }\r\n  }\r\n\r\n  private async analyzeCurrentPage(): Promise<void> {\r\n    const content = this.extractPageContent();\r\n\r\n    if (content.trim().length < 100) {\r\n      return; // Not enough content to analyze\r\n    }\r\n\r\n    try {\r\n      const response = await this.sendMessage({\r\n        type: \"ANALYZE_CONTENT\",\r\n        payload: {\r\n          content,\r\n          url: window.location.href,\r\n        },\r\n      });\r\n\r\n      if (response.success) {\r\n        this.analysis = response.analysis;\r\n        console.log(\"Content analysis:\", this.analysis);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to analyze content:\", error);\r\n    }\r\n  }\r\n\r\n  private extractPageContent(): string {\r\n    // Create a clone to avoid modifying the original DOM\r\n    const clone = document.cloneNode(true) as Document;\r\n\r\n    // Remove unwanted elements\r\n    const unwantedSelectors = [\r\n      \"script\",\r\n      \"style\",\r\n      \"nav\",\r\n      \"header\",\r\n      \"footer\",\r\n      \"aside\",\r\n      \".advertisement\",\r\n      \".ads\",\r\n      \".popup\",\r\n      \".modal\",\r\n      \".overlay\",\r\n    ];\r\n\r\n    unwantedSelectors.forEach((selector) => {\r\n      clone.querySelectorAll(selector).forEach((el) => el.remove());\r\n    });\r\n\r\n    // Try to find main content\r\n    const contentSelectors = [\r\n      \"main\",\r\n      \"article\",\r\n      \".content\",\r\n      \".post-content\",\r\n      \".article-content\",\r\n      \".entry-content\",\r\n      \"#content\",\r\n      \".chapter-content\",\r\n      \".story-content\",\r\n    ];\r\n\r\n    for (const selector of contentSelectors) {\r\n      const element = clone.querySelector(selector);\r\n      if (element && element.textContent && element.textContent.length > 500) {\r\n        return element.textContent.trim().replace(/\\s+/g, \" \");\r\n      }\r\n    }\r\n\r\n    // Fallback to body content\r\n    return clone.body?.textContent?.trim().replace(/\\s+/g, \" \") || \"\";\r\n  }\r\n\r\n  private createNovelSynthUI(): void {\r\n    if (this.novelSynthUI) return;\r\n\r\n    // Create floating action button\r\n    this.novelSynthUI = document.createElement(\"div\");\r\n    this.novelSynthUI.id = \"novelsynth-fab\";\r\n    this.novelSynthUI.innerHTML = `\r\n      <div class=\"novelsynth-fab-button\">\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M12 2L2 7L12 12L22 7L12 2Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linejoin=\"round\"/>\r\n          <path d=\"M2 17L12 22L22 17\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linejoin=\"round\"/>\r\n          <path d=\"M2 12L12 17L22 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linejoin=\"round\"/>\r\n        </svg>\r\n      </div>\r\n      <div class=\"novelsynth-panel\" style=\"display: none;\">\r\n        <div class=\"novelsynth-header\">\r\n          <h3>NovelSynth</h3>\r\n          <span class=\"novelsynth-close\">&times;</span>\r\n        </div>\r\n        <div class=\"novelsynth-content\">\r\n          <div class=\"novelsynth-info\">\r\n            <p><strong>Content Type:</strong> ${\r\n              this.analysis?.contentType || \"Unknown\"\r\n            }</p>\r\n            <p><strong>Word Count:</strong> ${\r\n              this.analysis?.wordCount?.toLocaleString() || \"Unknown\"\r\n            }</p>\r\n            <p><strong>Reading Time:</strong> ${\r\n              this.analysis?.readingTime || \"Unknown\"\r\n            } min</p>\r\n          </div>          <div class=\"novelsynth-actions\">\r\n            <button class=\"novelsynth-btn\" data-action=\"enhance\">✨ Enhance</button>\r\n            <button class=\"novelsynth-btn\" data-action=\"summarize\">📄 Summarize</button>\r\n            <button class=\"novelsynth-btn\" data-action=\"analyze\">🔍 Analyze</button>\r\n            <button class=\"novelsynth-btn\" data-action=\"suggestions\">💡 Suggestions</button>\r\n          </div>\r\n          <div class=\"novelsynth-result\" style=\"display: none;\"></div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    // Add event listeners\r\n    this.addEventListeners();\r\n\r\n    // Append to page\r\n    document.body.appendChild(this.novelSynthUI);\r\n  }\r\n\r\n  private addEventListeners(): void {\r\n    if (!this.novelSynthUI) return;\r\n\r\n    const fab = this.novelSynthUI.querySelector(\".novelsynth-fab-button\");\r\n    const panel = this.novelSynthUI.querySelector(\r\n      \".novelsynth-panel\"\r\n    ) as HTMLElement;\r\n    const closeBtn = this.novelSynthUI.querySelector(\".novelsynth-close\");\r\n    const actionBtns = this.novelSynthUI.querySelectorAll(\".novelsynth-btn\");\r\n\r\n    // Toggle panel\r\n    fab?.addEventListener(\"click\", () => {\r\n      panel.style.display = panel.style.display === \"none\" ? \"block\" : \"none\";\r\n    });\r\n\r\n    // Close panel\r\n    closeBtn?.addEventListener(\"click\", () => {\r\n      panel.style.display = \"none\";\r\n    });\r\n\r\n    // Action buttons\r\n    actionBtns.forEach((btn) => {\r\n      btn.addEventListener(\"click\", async (e) => {\r\n        const action = (e.target as HTMLElement).getAttribute(\"data-action\");\r\n        if (action) {\r\n          await this.handleAction(\r\n            action as \"summarize\" | \"analyze\" | \"suggestions\"\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private async handleAction(\r\n    action: \"enhance\" | \"summarize\" | \"analyze\" | \"suggestions\"\r\n  ): Promise<void> {\r\n    const resultDiv = this.novelSynthUI?.querySelector(\r\n      \".novelsynth-result\"\r\n    ) as HTMLElement;\r\n    if (!resultDiv) return;\r\n\r\n    // Show loading\r\n    resultDiv.style.display = \"block\";\r\n    resultDiv.innerHTML = '<div class=\"novelsynth-loading\">Processing...</div>';\r\n\r\n    try {\r\n      const content = this.extractPageContent();\r\n      const wordCount = WordCounter.countWords(content); // Show processing banner if enabled\r\n      if (this.processingBanner && this.settings?.showProcessingBanner) {\r\n        const contentElement = document.querySelector(\"main\") || document.body;\r\n        this.processingBanner.showProcessingBanner(contentElement);\r\n      }\r\n\r\n      const response = await this.sendMessage({\r\n        type: \"GET_AI_RESPONSE\",\r\n        payload: {\r\n          type: action,\r\n          content: content.substring(0, 8000), // Limit content length\r\n          options: {},\r\n        },\r\n      });\r\n\r\n      // Hide processing banner\r\n      if (this.processingBanner) {\r\n        this.processingBanner.removeBanner();\r\n      }\r\n\r\n      if (response.success && response.response) {\r\n        this.displayResult(action, response.response, resultDiv);\r\n      } else {\r\n        resultDiv.innerHTML = `<div class=\"novelsynth-error\">Error: ${\r\n          response.response?.error || \"Unknown error\"\r\n        }</div>`;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Failed to ${action}:`, error);\r\n\r\n      // Hide processing banner on error\r\n      if (this.processingBanner) {\r\n        this.processingBanner.removeBanner();\r\n      }\r\n\r\n      resultDiv.innerHTML = `<div class=\"novelsynth-error\">Failed to ${action} content</div>`;\r\n    }\r\n  }\r\n\r\n  private getModelForAction(action: string): string {\r\n    if (!this.settings) return \"unknown\";\r\n\r\n    switch (action) {\r\n      case \"enhance\":\r\n        return this.settings.selectedModels.enhance;\r\n      case \"summarize\":\r\n        return this.settings.selectedModels.summarize;\r\n      case \"analyze\":\r\n        return this.settings.selectedModels.analyze;\r\n      case \"suggestions\":\r\n        return this.settings.selectedModels.suggestions;\r\n      default:\r\n        return this.settings.selectedModels.enhance;\r\n    }\r\n  }\r\n\r\n  private displayResult(\r\n    action: string,\r\n    result: any,\r\n    container: HTMLElement\r\n  ): void {\r\n    let html = `<div class=\"novelsynth-result-header\">${\r\n      action.charAt(0).toUpperCase() + action.slice(1)\r\n    } Result:</div>`;\r\n\r\n    if (action === \"summarize\" && result.summary) {\r\n      html += `<div class=\"novelsynth-summary\">${result.summary}</div>`;\r\n    } else if (action === \"analyze\" && result.analysis) {\r\n      html += `<div class=\"novelsynth-analysis\">${result.analysis}</div>`;\r\n    } else if (action === \"suggestions\" && result.suggestions) {\r\n      html += '<div class=\"novelsynth-suggestions\"><ul>';\r\n      result.suggestions.forEach((suggestion: string) => {\r\n        html += `<li>${suggestion}</li>`;\r\n      });\r\n      html += \"</ul></div>\";\r\n    } else {\r\n      html += '<div class=\"novelsynth-error\">No result available</div>';\r\n    }\r\n\r\n    container.innerHTML = html;\r\n  }\r\n\r\n  private async sendMessage(message: ExtensionMessage): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      chrome.runtime.sendMessage(message, (response) => {\r\n        if (chrome.runtime.lastError) {\r\n          reject(new Error(chrome.runtime.lastError.message));\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n// Initialize content script\r\nnew ContentScript();\r\n"],"names":["WordCounter","countWords","text","cleanText","replace","trim","split","filter","word","length","countCharacters","calculateStats","originalText","enhancedText","originalWords","this","enhancedWords","wordsChanged","percentageChange","charactersOriginal","charactersEnhanced","Math","round","formatWordCount","count","toString","toFixed","formatPercentageChange","percentage","formatWordChange","change","abs","getReadingTime","wordCount","minutes","hours","floor","remainingMinutes","extractContentWordCount","element","clone","cloneNode","forEach","selector","querySelectorAll","el","remove","textContent","ProcessingBanner","bannerElement","constructor","config","showInitialBanner","contentElement","showProcessingBanner","removeBanner","banner","createBannerElement","readingTime","innerHTML","provider","model","insertBanner","setupBannerEvents","classList","add","showCompletionBanner","stats","processingTime","changeColor","changeIcon","setTimeout","showErrorBanner","error","document","createElement","className","getBannerStyles","parentElement","body","insertBefore","closeButton","querySelector","addEventListener","isInitialized","analysis","novelSynthUI","processingBanner","settings","init","readyState","initialize","loadSettings","selectedProvider","selectedModels","enhance","showWordCount","analyzeCurrentPage","isLongForm","createNovelSynthUI","console","log","response","sendMessage","type","payload","success","content","extractPageContent","url","window","location","href","contentSelectors","id","contentType","toLocaleString","addEventListeners","appendChild","fab","panel","closeBtn","actionBtns","style","display","btn","async","action","e","target","getAttribute","handleAction","resultDiv","substring","options","displayResult","getModelForAction","summarize","analyze","suggestions","result","container","html","charAt","toUpperCase","slice","summary","suggestion","message","Promise","resolve","reject","chrome","runtime","lastError","Error"],"sourceRoot":""}