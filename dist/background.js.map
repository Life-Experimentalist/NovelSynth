{"version":3,"file":"background.js","mappings":"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","sources":["webpack://novelsynth/webpack/runtime/load script","webpack://novelsynth/webpack/bootstrap","webpack://novelsynth/webpack/runtime/define property getters","webpack://novelsynth/webpack/runtime/ensure chunk","webpack://novelsynth/webpack/runtime/get javascript chunk filename","webpack://novelsynth/webpack/runtime/global","webpack://novelsynth/webpack/runtime/hasOwnProperty shorthand","webpack://novelsynth/webpack/runtime/publicPath","webpack://novelsynth/webpack/runtime/jsonp chunk loading","webpack://novelsynth/./src/services/ai/BaseAIService.ts","webpack://novelsynth/./src/utils/WordCounter.ts","webpack://novelsynth/./src/services/ai/GeminiService.ts","webpack://novelsynth/./src/services/ai/OpenAIService.ts","webpack://novelsynth/./src/services/ai/HuggingFaceService.ts","webpack://novelsynth/./src/services/ai/AnthropicService.ts","webpack://novelsynth/./src/services/ai/OpenRouterService.ts","webpack://novelsynth/./src/utils/RateLimiter.ts","webpack://novelsynth/./src/utils/ContentSegmenter.ts","webpack://novelsynth/./src/utils/PromptManager.ts","webpack://novelsynth/./src/services/ai/AIServiceManager.ts","webpack://novelsynth/./src/services/handlers/fanfiction.ts","webpack://novelsynth/./src/services/handlers/archiveOfOurOwn.ts","webpack://novelsynth/./src/services/handlers/royalRoad.ts","webpack://novelsynth/./src/services/handlers/webnovel.ts","webpack://novelsynth/./src/services/handlers/geeksForGeeks.ts","webpack://novelsynth/./src/services/handlers/medium.ts","webpack://novelsynth/./src/services/handlers/genericNews.ts","webpack://novelsynth/./src/services/handlers/SiteHandlerManager.ts","webpack://novelsynth/./src/utils/StorageManager.ts","webpack://novelsynth/./src/background/index.ts"],"sourcesContent":["var inProgress = {};\nvar dataWebpackPrefix = \"novelsynth:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t471: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunknovelsynth\"] = self[\"webpackChunknovelsynth\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","import type { AIProvider, AIResponse } from \"../../types\";\r\n\r\nexport abstract class BaseAIService {\r\n  abstract provider: AIProvider;\r\n  protected apiKey: string = \"\";\r\n\r\n  constructor(apiKey?: string) {\r\n    if (apiKey) {\r\n      this.apiKey = apiKey;\r\n    }\r\n  }\r\n\r\n  setApiKey(apiKey: string): void {\r\n    this.apiKey = apiKey;\r\n  }\r\n  abstract summarize(content: string, options?: any): Promise<AIResponse>;\r\n  abstract analyze(content: string, options?: any): Promise<AIResponse>;\r\n  abstract generateSuggestions(\r\n    content: string,\r\n    options?: any\r\n  ): Promise<AIResponse>;\r\n  abstract enhance(\r\n    content: string,\r\n    prompt: string,\r\n    options?: any\r\n  ): Promise<AIResponse>;\r\n\r\n  protected validateApiKey(): void {\r\n    if (!this.apiKey && this.provider.requiresAuth) {\r\n      throw new Error(`API key required for ${this.provider.name}`);\r\n    }\r\n  }\r\n\r\n  protected async makeRequest(url: string, options: RequestInit): Promise<any> {\r\n    try {\r\n      const response = await fetch(url, options);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`API request failed for ${this.provider.name}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","export interface WordCountStats {\r\n  originalWords: number;\r\n  enhancedWords: number;\r\n  wordsChanged: number;\r\n  percentageChange: number;\r\n  charactersOriginal: number;\r\n  charactersEnhanced: number;\r\n}\r\n\r\nexport class WordCounter {\r\n  /**\r\n   * Count words in text content\r\n   */\r\n  static countWords(text: string): number {\r\n    if (!text || typeof text !== \"string\") {\r\n      return 0;\r\n    }\r\n\r\n    // Remove HTML tags and clean text\r\n    const cleanText = text\r\n      .replace(/<[^>]*>/g, \" \")\r\n      .replace(/\\s+/g, \" \")\r\n      .trim();\r\n\r\n    if (!cleanText) {\r\n      return 0;\r\n    }\r\n\r\n    // Split by whitespace and filter out empty strings\r\n    return cleanText.split(/\\s+/).filter((word) => word.length > 0).length;\r\n  }\r\n\r\n  /**\r\n   * Count characters in text content\r\n   */\r\n  static countCharacters(text: string): number {\r\n    if (!text || typeof text !== \"string\") {\r\n      return 0;\r\n    }\r\n\r\n    // Remove HTML tags and count characters\r\n    return text.replace(/<[^>]*>/g, \"\").length;\r\n  }\r\n\r\n  /**\r\n   * Calculate enhancement statistics\r\n   */\r\n  static calculateStats(\r\n    originalText: string,\r\n    enhancedText: string\r\n  ): WordCountStats {\r\n    const originalWords = this.countWords(originalText);\r\n    const enhancedWords = this.countWords(enhancedText);\r\n    const wordsChanged = enhancedWords - originalWords;\r\n    const percentageChange =\r\n      originalWords > 0 ? (wordsChanged / originalWords) * 100 : 0;\r\n\r\n    const charactersOriginal = this.countCharacters(originalText);\r\n    const charactersEnhanced = this.countCharacters(enhancedText);\r\n\r\n    return {\r\n      originalWords,\r\n      enhancedWords,\r\n      wordsChanged,\r\n      percentageChange: Math.round(percentageChange * 100) / 100, // Round to 2 decimal places\r\n      charactersOriginal,\r\n      charactersEnhanced,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Format word count for display\r\n   */\r\n  static formatWordCount(count: number): string {\r\n    if (count < 1000) {\r\n      return count.toString();\r\n    } else if (count < 1000000) {\r\n      return (count / 1000).toFixed(1) + \"K\";\r\n    } else {\r\n      return (count / 1000000).toFixed(1) + \"M\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format percentage change for display\r\n   */\r\n  static formatPercentageChange(percentage: number): string {\r\n    const sign = percentage > 0 ? \"+\" : \"\";\r\n    return `${sign}${percentage.toFixed(1)}%`;\r\n  }\r\n\r\n  /**\r\n   * Format word change for display\r\n   */\r\n  static formatWordChange(change: number): string {\r\n    const sign = change > 0 ? \"+\" : \"\";\r\n    return `${sign}${this.formatWordCount(Math.abs(change))}`;\r\n  }\r\n\r\n  /**\r\n   * Get reading time estimate (assuming 200 words per minute)\r\n   */\r\n  static getReadingTime(wordCount: number): string {\r\n    const minutes = Math.round(wordCount / 200);\r\n\r\n    if (minutes < 1) {\r\n      return \"< 1 min\";\r\n    } else if (minutes < 60) {\r\n      return `${minutes} min`;\r\n    } else {\r\n      const hours = Math.floor(minutes / 60);\r\n      const remainingMinutes = minutes % 60;\r\n      return remainingMinutes > 0\r\n        ? `${hours}h ${remainingMinutes}m`\r\n        : `${hours}h`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract word count from page content\r\n   */\r\n  static extractContentWordCount(element: Element): number {\r\n    if (!element) {\r\n      return 0;\r\n    }\r\n\r\n    // Clone element to avoid modifying original\r\n    const clone = element.cloneNode(true) as Element;\r\n\r\n    // Remove navigation, ads, and other non-content elements\r\n    const elementsToRemove = [\r\n      \"nav\",\r\n      \"header\",\r\n      \"footer\",\r\n      \"aside\",\r\n      \".ads\",\r\n      \".navigation\",\r\n      \".breadcrumb\",\r\n      \".social\",\r\n      \".share\",\r\n      \".comments\",\r\n      \".author-bio\",\r\n    ];\r\n\r\n    elementsToRemove.forEach((selector) => {\r\n      const elements = clone.querySelectorAll(selector);\r\n      elements.forEach((el) => el.remove());\r\n    });\r\n\r\n    return this.countWords(clone.textContent || \"\");\r\n  }\r\n}\r\n","import { BaseAIService } from \"./BaseAIService\";\r\nimport type { AIProvider, AIResponse } from \"../../types\";\r\nimport { WordCounter } from \"../../utils/WordCounter\";\r\n\r\nexport class GeminiService extends BaseAIService {\r\n  provider: AIProvider = {\r\n    name: \"Google Gemini\",\r\n    id: \"gemini\",\r\n    apiEndpoint: \"https://generativelanguage.googleapis.com/v1beta\",\r\n    requiresAuth: true,\r\n    authType: \"api_key\",\r\n    features: [\"summarize\", \"analyze\", \"suggestions\", \"keyPoints\"],\r\n  };\r\n\r\n  async summarize(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    const prompt = `Please provide a concise summary of the following content:\\n\\n${content}`;\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/models/gemini-pro:generateContent?key=${this.apiKey}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            contents: [\r\n              {\r\n                parts: [{ text: prompt }],\r\n              },\r\n            ],\r\n          }),\r\n        }\r\n      );\r\n\r\n      return {\r\n        summary:\r\n          response.candidates?.[0]?.content?.parts?.[0]?.text ||\r\n          \"No summary available\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate summary: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async analyze(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    const prompt = `Analyze the following content and provide insights about its structure, themes, and key points:\\n\\n${content}`;\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/models/gemini-pro:generateContent?key=${this.apiKey}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            contents: [\r\n              {\r\n                parts: [{ text: prompt }],\r\n              },\r\n            ],\r\n          }),\r\n        }\r\n      );\r\n\r\n      return {\r\n        analysis:\r\n          response.candidates?.[0]?.content?.parts?.[0]?.text ||\r\n          \"No analysis available\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate analysis: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async generateSuggestions(\r\n    content: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    const prompt = `Based on the following content, provide helpful suggestions for better understanding or related topics to explore:\\n\\n${content}`;\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/models/gemini-pro:generateContent?key=${this.apiKey}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            contents: [\r\n              {\r\n                parts: [{ text: prompt }],\r\n              },\r\n            ],\r\n          }),\r\n        }\r\n      );\r\n      const text = response.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\r\n      const suggestions = text\r\n        .split(\"\\n\")\r\n        .filter((line: string) => line.trim().length > 0);\r\n\r\n      return {\r\n        suggestions,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate suggestions: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async enhance(\r\n    content: string,\r\n    prompt: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    const startTime = Date.now();\r\n    const originalWordCount = WordCounter.countWords(content);\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/models/gemini-1.5-pro:generateContent?key=${this.apiKey}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            contents: [\r\n              {\r\n                parts: [{ text: prompt }],\r\n              },\r\n            ],\r\n            generationConfig: {\r\n              maxOutputTokens: 8192,\r\n              temperature: 0.7,\r\n            },\r\n          }),\r\n        }\r\n      );\r\n\r\n      const enhancedContent =\r\n        response.candidates?.[0]?.content?.parts?.[0]?.text || content;\r\n      const processingTime = Date.now() - startTime;\r\n      const stats = WordCounter.calculateStats(content, enhancedContent);\r\n\r\n      return {\r\n        enhanced: enhancedContent,\r\n        processingTime,\r\n        stats,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to enhance content: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { BaseAIService } from \"./BaseAIService\";\r\nimport type { AIProvider, AIResponse } from \"../../types\";\r\nimport { WordCounter } from \"../../utils/WordCounter\";\r\n\r\nexport class OpenAIService extends BaseAIService {\r\n  provider: AIProvider = {\r\n    name: \"OpenAI GPT\",\r\n    id: \"openai\",\r\n    apiEndpoint: \"https://api.openai.com/v1\",\r\n    requiresAuth: true,\r\n    authType: \"api_key\",\r\n    features: [\"summarize\", \"analyze\", \"suggestions\", \"keyPoints\"],\r\n  };\r\n\r\n  async summarize(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/chat/completions`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"gpt-3.5-turbo\",\r\n            messages: [\r\n              {\r\n                role: \"system\",\r\n                content:\r\n                  \"You are a helpful assistant that provides concise summaries of content.\",\r\n              },\r\n              {\r\n                role: \"user\",\r\n                content: `Please provide a concise summary of the following content:\\n\\n${content}`,\r\n              },\r\n            ],\r\n            max_tokens: 500,\r\n            temperature: 0.7,\r\n          }),\r\n        }\r\n      );\r\n\r\n      return {\r\n        summary:\r\n          response.choices?.[0]?.message?.content || \"No summary available\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate summary: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async analyze(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/chat/completions`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"gpt-3.5-turbo\",\r\n            messages: [\r\n              {\r\n                role: \"system\",\r\n                content:\r\n                  \"You are a helpful assistant that analyzes content and provides insights.\",\r\n              },\r\n              {\r\n                role: \"user\",\r\n                content: `Analyze the following content and provide insights about its structure, themes, and key points:\\n\\n${content}`,\r\n              },\r\n            ],\r\n            max_tokens: 800,\r\n            temperature: 0.7,\r\n          }),\r\n        }\r\n      );\r\n\r\n      return {\r\n        analysis:\r\n          response.choices?.[0]?.message?.content || \"No analysis available\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate analysis: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async generateSuggestions(\r\n    content: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/chat/completions`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"gpt-3.5-turbo\",\r\n            messages: [\r\n              {\r\n                role: \"system\",\r\n                content:\r\n                  \"You are a helpful assistant that provides useful suggestions based on content.\",\r\n              },\r\n              {\r\n                role: \"user\",\r\n                content: `Based on the following content, provide 3-5 helpful suggestions for better understanding or related topics to explore:\\n\\n${content}`,\r\n              },\r\n            ],\r\n            max_tokens: 400,\r\n            temperature: 0.8,\r\n          }),\r\n        }\r\n      );\r\n      const text = response.choices?.[0]?.message?.content || \"\";\r\n      const suggestions = text\r\n        .split(\"\\n\")\r\n        .filter(\r\n          (line: string) =>\r\n            line.trim().length > 0 &&\r\n            (line.includes(\"•\") || line.includes(\"-\") || line.includes(\"1.\"))\r\n        );\r\n\r\n      return {\r\n        suggestions,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate suggestions: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async enhance(\r\n    content: string,\r\n    prompt: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    const startTime = Date.now();\r\n    const model = options?.model || \"gpt-4-turbo\";\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/chat/completions`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n          },\r\n          body: JSON.stringify({\r\n            model,\r\n            messages: [\r\n              {\r\n                role: \"user\",\r\n                content: prompt,\r\n              },\r\n            ],\r\n            max_tokens: 4096,\r\n            temperature: 0.7,\r\n          }),\r\n        }\r\n      );\r\n\r\n      const enhancedContent =\r\n        response.choices?.[0]?.message?.content || content;\r\n      const processingTime = Date.now() - startTime;\r\n      const stats = WordCounter.calculateStats(content, enhancedContent);\r\n\r\n      return {\r\n        enhanced: enhancedContent,\r\n        processingTime,\r\n        stats,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to enhance content: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { BaseAIService } from \"./BaseAIService\";\r\nimport type { AIProvider, AIResponse } from \"../../types\";\r\nimport { WordCounter } from \"../../utils/WordCounter\";\r\n\r\nexport class HuggingFaceService extends BaseAIService {\r\n  provider: AIProvider = {\r\n    name: \"Hugging Face\",\r\n    id: \"huggingface\",\r\n    apiEndpoint: \"https://api-inference.huggingface.co\",\r\n    requiresAuth: true,\r\n    authType: \"api_key\",\r\n    features: [\"summarize\", \"analyze\"],\r\n  };\r\n\r\n  async summarize(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/models/facebook/bart-large-cnn`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            inputs: content.substring(0, 1024), // Limit input length for free tier\r\n            parameters: {\r\n              max_length: 200,\r\n              min_length: 50,\r\n            },\r\n          }),\r\n        }\r\n      );\r\n\r\n      return {\r\n        summary: response[0]?.summary_text || \"No summary available\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate summary: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async analyze(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      // Use text classification for basic analysis\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/models/cardiffnlp/twitter-roberta-base-sentiment-latest`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            inputs: content.substring(0, 512),\r\n          }),\r\n        }\r\n      );\r\n\r\n      const sentiment = response[0];\r\n      const analysis = `Content Analysis:\\n- Sentiment: ${\r\n        sentiment?.label || \"Unknown\"\r\n      } (${(sentiment?.score * 100).toFixed(1)}% confidence)\\n- Length: ${\r\n        content.length\r\n      } characters\\n- Estimated reading time: ${Math.ceil(\r\n        content.split(\" \").length / 200\r\n      )} minutes`;\r\n\r\n      return {\r\n        analysis,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate analysis: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async generateSuggestions(\r\n    content: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    // HuggingFace free inference doesn't support this well, return basic suggestions\r\n    return {\r\n      suggestions: [\r\n        \"Consider reading similar content on this topic\",\r\n        \"Look up key terms mentioned in the content\",\r\n        \"Check for related articles by the same author\",\r\n        \"Explore the main themes discussed\",\r\n      ],\r\n    };\r\n  }\r\n\r\n  async enhance(\r\n    content: string,\r\n    prompt: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    // HuggingFace free inference has limited enhancement capabilities\r\n    // Return the original content with a simple enhancement note\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // Basic enhancement - just return cleaned content with minor improvements\r\n      const enhancedContent = content\r\n        .replace(/\\s+/g, \" \")\r\n        .replace(/\\.\\s+/g, \". \")\r\n        .replace(/,\\s+/g, \", \")\r\n        .trim();\r\n\r\n      const processingTime = Date.now() - startTime;\r\n      const stats = WordCounter.calculateStats(content, enhancedContent);\r\n\r\n      return {\r\n        enhanced: enhancedContent,\r\n        processingTime,\r\n        stats,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to enhance content: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { BaseAIService } from \"./BaseAIService\";\r\nimport type { AIProvider, AIResponse } from \"../../types\";\r\nimport { WordCounter } from \"../../utils/WordCounter\";\r\n\r\nexport class AnthropicService extends BaseAIService {\r\n  provider: AIProvider = {\r\n    name: \"Anthropic Claude\",\r\n    id: \"anthropic\",\r\n    apiEndpoint: \"https://api.anthropic.com/v1\",\r\n    requiresAuth: true,\r\n    authType: \"api_key\",\r\n    features: [\"summarize\", \"analyze\", \"suggestions\", \"keyPoints\"],\r\n  };\r\n\r\n  async summarize(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/messages`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-api-key\": this.apiKey,\r\n            \"anthropic-version\": \"2023-06-01\",\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"claude-3-sonnet-20240229\",\r\n            max_tokens: 500,\r\n            messages: [\r\n              {\r\n                role: \"user\",\r\n                content: `Please provide a concise summary of the following content:\\n\\n${content}`,\r\n              },\r\n            ],\r\n          }),\r\n        }\r\n      );\r\n\r\n      return {\r\n        summary: response.content?.[0]?.text || \"No summary available\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate summary: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async analyze(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/messages`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-api-key\": this.apiKey,\r\n            \"anthropic-version\": \"2023-06-01\",\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"claude-3-sonnet-20240229\",\r\n            max_tokens: 800,\r\n            messages: [\r\n              {\r\n                role: \"user\",\r\n                content: `Analyze the following content and provide insights about its structure, themes, writing style, and key points:\\n\\n${content}`,\r\n              },\r\n            ],\r\n          }),\r\n        }\r\n      );\r\n\r\n      return {\r\n        analysis: response.content?.[0]?.text || \"No analysis available\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate analysis: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async generateSuggestions(\r\n    content: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/messages`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-api-key\": this.apiKey,\r\n            \"anthropic-version\": \"2023-06-01\",\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"claude-3-sonnet-20240229\",\r\n            max_tokens: 400,\r\n            messages: [\r\n              {\r\n                role: \"user\",\r\n                content: `Based on the following content, provide 3-5 helpful suggestions for better understanding, related topics to explore, or ways to engage with the material:\\n\\n${content}`,\r\n              },\r\n            ],\r\n          }),\r\n        }\r\n      );\r\n      const text = response.content?.[0]?.text || \"\";\r\n      const suggestions = text\r\n        .split(\"\\n\")\r\n        .filter(\r\n          (line: string) =>\r\n            line.trim().length > 0 &&\r\n            (line.includes(\"•\") ||\r\n              line.includes(\"-\") ||\r\n              /^\\d+\\./.test(line.trim()))\r\n        );\r\n\r\n      return {\r\n        suggestions,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate suggestions: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async enhance(\r\n    content: string,\r\n    prompt: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    const startTime = Date.now();\r\n    const model = options?.model || \"claude-3-sonnet-20240229\";\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/messages`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-api-key\": this.apiKey,\r\n            \"anthropic-version\": \"2023-06-01\",\r\n          },\r\n          body: JSON.stringify({\r\n            model,\r\n            max_tokens: 4096,\r\n            messages: [\r\n              {\r\n                role: \"user\",\r\n                content: prompt,\r\n              },\r\n            ],\r\n          }),\r\n        }\r\n      );\r\n\r\n      const enhancedContent = response.content?.[0]?.text || content;\r\n      const processingTime = Date.now() - startTime;\r\n      const stats = WordCounter.calculateStats(content, enhancedContent);\r\n\r\n      return {\r\n        enhanced: enhancedContent,\r\n        processingTime,\r\n        stats,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to enhance content: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { BaseAIService } from \"./BaseAIService\";\r\nimport type { AIProvider, AIResponse } from \"../../types\";\r\nimport { WordCounter } from \"../../utils/WordCounter\";\r\n\r\nexport class OpenRouterService extends BaseAIService {\r\n  provider: AIProvider = {\r\n    name: \"OpenRouter\",\r\n    id: \"openrouter\",\r\n    apiEndpoint: \"https://openrouter.ai/api/v1\",\r\n    requiresAuth: true,\r\n    authType: \"api_key\",\r\n    features: [\"summarize\", \"analyze\", \"suggestions\", \"keyPoints\"],\r\n  };\r\n\r\n  async summarize(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/chat/completions`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n            \"HTTP-Referer\": \"https://novelsynth.com\",\r\n            \"X-Title\": \"NovelSynth\",\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"meta-llama/llama-3.2-3b-instruct:free\",\r\n            messages: [\r\n              {\r\n                role: \"system\",\r\n                content:\r\n                  \"You are a helpful assistant that provides concise summaries of content.\",\r\n              },\r\n              {\r\n                role: \"user\",\r\n                content: `Please provide a concise summary of the following content:\\n\\n${content}`,\r\n              },\r\n            ],\r\n            max_tokens: 500,\r\n            temperature: 0.7,\r\n          }),\r\n        }\r\n      );\r\n\r\n      return {\r\n        summary:\r\n          response.choices?.[0]?.message?.content || \"No summary available\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate summary: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async analyze(content: string, options?: any): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/chat/completions`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n            \"HTTP-Referer\": \"https://novelsynth.com\",\r\n            \"X-Title\": \"NovelSynth\",\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"meta-llama/llama-3.2-3b-instruct:free\",\r\n            messages: [\r\n              {\r\n                role: \"system\",\r\n                content:\r\n                  \"You are a helpful assistant that analyzes content and provides insights.\",\r\n              },\r\n              {\r\n                role: \"user\",\r\n                content: `Analyze the following content and provide insights about its structure, themes, and key points:\\n\\n${content}`,\r\n              },\r\n            ],\r\n            max_tokens: 800,\r\n            temperature: 0.7,\r\n          }),\r\n        }\r\n      );\r\n\r\n      return {\r\n        analysis:\r\n          response.choices?.[0]?.message?.content || \"No analysis available\",\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate analysis: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async generateSuggestions(\r\n    content: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/chat/completions`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n            \"HTTP-Referer\": \"https://novelsynth.com\",\r\n            \"X-Title\": \"NovelSynth\",\r\n          },\r\n          body: JSON.stringify({\r\n            model: \"meta-llama/llama-3.2-3b-instruct:free\",\r\n            messages: [\r\n              {\r\n                role: \"system\",\r\n                content:\r\n                  \"You are a helpful assistant that provides useful suggestions based on content.\",\r\n              },\r\n              {\r\n                role: \"user\",\r\n                content: `Based on the following content, provide 3-5 helpful suggestions for better understanding or related topics to explore:\\n\\n${content}`,\r\n              },\r\n            ],\r\n            max_tokens: 400,\r\n            temperature: 0.8,\r\n          }),\r\n        }\r\n      );\r\n      const text = response.choices?.[0]?.message?.content || \"\";\r\n      const suggestions = text\r\n        .split(\"\\n\")\r\n        .filter(\r\n          (line: string) =>\r\n            line.trim().length > 0 &&\r\n            (line.includes(\"•\") ||\r\n              line.includes(\"-\") ||\r\n              /^\\d+\\./.test(line.trim()))\r\n        );\r\n\r\n      return {\r\n        suggestions,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to generate suggestions: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async enhance(\r\n    content: string,\r\n    prompt: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    this.validateApiKey();\r\n\r\n    const startTime = Date.now();\r\n    const model = options?.model || \"meta-llama/llama-3.2-3b-instruct:free\";\r\n\r\n    try {\r\n      const response = await this.makeRequest(\r\n        `${this.provider.apiEndpoint}/chat/completions`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n            \"HTTP-Referer\": \"https://novelsynth.com\",\r\n            \"X-Title\": \"NovelSynth\",\r\n          },\r\n          body: JSON.stringify({\r\n            model,\r\n            messages: [\r\n              {\r\n                role: \"user\",\r\n                content: prompt,\r\n              },\r\n            ],\r\n            max_tokens: 4096,\r\n            temperature: 0.7,\r\n          }),\r\n        }\r\n      );\r\n\r\n      const enhancedContent =\r\n        response.choices?.[0]?.message?.content || content;\r\n      const processingTime = Date.now() - startTime;\r\n      const stats = WordCounter.calculateStats(content, enhancedContent);\r\n\r\n      return {\r\n        enhanced: enhancedContent,\r\n        processingTime,\r\n        stats,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        error: `Failed to enhance content: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import type { RateLimitTracker, AIModel } from \"../types\";\r\n\r\nexport class RateLimiter {\r\n  private static trackers: Map<string, RateLimitTracker> = new Map();\r\n\r\n  /**\r\n   * Check if a request can be made based on rate limits\r\n   */\r\n  static canMakeRequest(\r\n    provider: string,\r\n    model: AIModel,\r\n    tokenCount: number = 0\r\n  ): boolean {\r\n    const key = `${provider}:${model.id}`;\r\n    const tracker = this.getTracker(key, provider, model.id);\r\n    const now = Date.now();\r\n\r\n    // Reset counters if a minute has passed\r\n    if (now - tracker.lastRequest >= 60000) {\r\n      tracker.requestCount = 0;\r\n      tracker.tokenCount = 0;\r\n    }\r\n\r\n    // Check RPM limit\r\n    if (model.rateLimitRPM && tracker.requestCount >= model.rateLimitRPM) {\r\n      return false;\r\n    }\r\n\r\n    // Check TPM limit\r\n    if (\r\n      model.rateLimitTPM &&\r\n      tracker.tokenCount + tokenCount > model.rateLimitTPM\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    return now >= tracker.nextAvailableTime;\r\n  }\r\n\r\n  /**\r\n   * Record a request and update rate limit tracker\r\n   */\r\n  static recordRequest(\r\n    provider: string,\r\n    model: AIModel,\r\n    tokenCount: number = 0\r\n  ): void {\r\n    const key = `${provider}:${model.id}`;\r\n    const tracker = this.getTracker(key, provider, model.id);\r\n    const now = Date.now();\r\n\r\n    tracker.requestCount++;\r\n    tracker.tokenCount += tokenCount;\r\n    tracker.lastRequest = now;\r\n\r\n    // Calculate next available time based on rate limits\r\n    if (model.rateLimitRPM) {\r\n      const requestInterval = 60000 / model.rateLimitRPM;\r\n      tracker.nextAvailableTime = Math.max(\r\n        tracker.nextAvailableTime,\r\n        now + requestInterval\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get time until next request can be made\r\n   */\r\n  static getWaitTime(provider: string, model: AIModel): number {\r\n    const key = `${provider}:${model.id}`;\r\n    const tracker = this.getTracker(key, provider, model.id);\r\n    const now = Date.now();\r\n\r\n    return Math.max(0, tracker.nextAvailableTime - now);\r\n  }\r\n\r\n  /**\r\n   * Wait for rate limit to reset\r\n   */\r\n  static async waitForRateLimit(\r\n    provider: string,\r\n    model: AIModel\r\n  ): Promise<void> {\r\n    const waitTime = this.getWaitTime(provider, model);\r\n    if (waitTime > 0) {\r\n      console.log(\r\n        `Rate limit reached for ${provider}:${model.id}. Waiting ${waitTime}ms...`\r\n      );\r\n      await new Promise((resolve) => setTimeout(resolve, waitTime));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get or create rate limit tracker\r\n   */\r\n  private static getTracker(\r\n    key: string,\r\n    provider: string,\r\n    modelId: string\r\n  ): RateLimitTracker {\r\n    if (!this.trackers.has(key)) {\r\n      this.trackers.set(key, {\r\n        provider,\r\n        model: modelId,\r\n        requestCount: 0,\r\n        tokenCount: 0,\r\n        lastRequest: 0,\r\n        nextAvailableTime: 0,\r\n      });\r\n    }\r\n\r\n    return this.trackers.get(key)!;\r\n  }\r\n\r\n  /**\r\n   * Clear all rate limit trackers\r\n   */\r\n  static clearTrackers(): void {\r\n    this.trackers.clear();\r\n  }\r\n\r\n  /**\r\n   * Get all current trackers (for debugging)\r\n   */\r\n  static getTrackers(): RateLimitTracker[] {\r\n    return Array.from(this.trackers.values());\r\n  }\r\n}\r\n","import type {\r\n  ContentSegment,\r\n  ImagePosition,\r\n  SegmentationOptions,\r\n} from \"../types\";\r\n\r\nexport class ContentSegmenter {\r\n  private static readonly DEFAULT_OPTIONS: SegmentationOptions = {\r\n    maxChunkSize: 12000,\r\n    preserveImages: true,\r\n    preserveFormatting: true,\r\n    overlapSize: 200,\r\n  };\r\n\r\n  /**\r\n   * Segment content into smaller chunks while preserving images and formatting\r\n   */\r\n  static segmentContent(\r\n    content: string,\r\n    options: Partial<SegmentationOptions> = {}\r\n  ): ContentSegment[] {\r\n    const opts = { ...this.DEFAULT_OPTIONS, ...options };\r\n    const segments: ContentSegment[] = [];\r\n\r\n    // Extract images first if preservation is enabled\r\n    const imagePositions = opts.preserveImages\r\n      ? this.extractImages(content)\r\n      : [];\r\n\r\n    // Remove images from content for segmentation, but keep placeholders\r\n    let workingContent = content;\r\n    const imagePlaceholders: string[] = [];\r\n\r\n    if (opts.preserveImages) {\r\n      imagePositions.forEach((img, index) => {\r\n        const placeholder = `__IMAGE_PLACEHOLDER_${index}__`;\r\n        imagePlaceholders.push(placeholder);\r\n        workingContent = workingContent.replace(img.originalTag, placeholder);\r\n      });\r\n    }\r\n\r\n    // Split content into segments\r\n    const segments_raw = this.splitBySize(\r\n      workingContent,\r\n      opts.maxChunkSize,\r\n      opts.overlapSize\r\n    );\r\n\r\n    // Create segment objects\r\n    segments_raw.forEach((segment, index) => {\r\n      // Restore images in this segment\r\n      let segmentContent = segment.content;\r\n      const segmentImages: ImagePosition[] = [];\r\n\r\n      if (opts.preserveImages) {\r\n        imagePlaceholders.forEach((placeholder, imgIndex) => {\r\n          if (segmentContent.includes(placeholder)) {\r\n            const originalImage = imagePositions[imgIndex];\r\n            segmentContent = segmentContent.replace(\r\n              placeholder,\r\n              originalImage.originalTag\r\n            );\r\n            segmentImages.push({\r\n              ...originalImage,\r\n              position: segmentContent.indexOf(originalImage.originalTag),\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      segments.push({\r\n        id: `segment_${index}`,\r\n        content: segmentContent,\r\n        startIndex: segment.startIndex,\r\n        endIndex: segment.endIndex,\r\n        preserveImages: opts.preserveImages,\r\n        imagePositions: segmentImages,\r\n      });\r\n    });\r\n\r\n    return segments;\r\n  }\r\n\r\n  /**\r\n   * Reassemble segments back into complete content\r\n   */\r\n  static reassembleSegments(segments: ContentSegment[]): string {\r\n    // Sort segments by start index\r\n    const sortedSegments = segments.sort((a, b) => a.startIndex - b.startIndex);\r\n\r\n    // Combine content, removing overlaps\r\n    let reassembled = \"\";\r\n    let lastEndIndex = 0;\r\n\r\n    sortedSegments.forEach((segment, index) => {\r\n      if (index === 0) {\r\n        reassembled = segment.content;\r\n        lastEndIndex = segment.endIndex;\r\n      } else {\r\n        // Remove overlap with previous segment\r\n        const overlapStart = Math.max(0, lastEndIndex - segment.startIndex);\r\n        const segmentContent =\r\n          overlapStart > 0\r\n            ? segment.content.substring(overlapStart)\r\n            : segment.content;\r\n\r\n        reassembled += segmentContent;\r\n        lastEndIndex = segment.endIndex;\r\n      }\r\n    });\r\n\r\n    return reassembled;\r\n  }\r\n\r\n  /**\r\n   * Extract image positions from HTML content\r\n   */\r\n  private static extractImages(content: string): ImagePosition[] {\r\n    const images: ImagePosition[] = [];\r\n    const imgRegex = /<img[^>]*>/gi;\r\n    let match;\r\n\r\n    while ((match = imgRegex.exec(content)) !== null) {\r\n      const imgTag = match[0];\r\n      const srcMatch = imgTag.match(/src=[\"']([^\"']*)[\"']/i);\r\n      const altMatch = imgTag.match(/alt=[\"']([^\"']*)[\"']/i);\r\n      const titleMatch = imgTag.match(/title=[\"']([^\"']*)[\"']/i);\r\n\r\n      if (srcMatch) {\r\n        images.push({\r\n          src: srcMatch[1],\r\n          alt: altMatch ? altMatch[1] : undefined,\r\n          title: titleMatch ? titleMatch[1] : undefined,\r\n          position: match.index,\r\n          originalTag: imgTag,\r\n        });\r\n      }\r\n    }\r\n\r\n    return images;\r\n  }\r\n\r\n  /**\r\n   * Split content by size with overlap\r\n   */\r\n  private static splitBySize(\r\n    content: string,\r\n    maxSize: number,\r\n    overlapSize: number\r\n  ): { content: string; startIndex: number; endIndex: number }[] {\r\n    const segments: {\r\n      content: string;\r\n      startIndex: number;\r\n      endIndex: number;\r\n    }[] = [];\r\n\r\n    if (content.length <= maxSize) {\r\n      return [\r\n        {\r\n          content,\r\n          startIndex: 0,\r\n          endIndex: content.length,\r\n        },\r\n      ];\r\n    }\r\n\r\n    let currentIndex = 0;\r\n\r\n    while (currentIndex < content.length) {\r\n      const endIndex = Math.min(currentIndex + maxSize, content.length);\r\n      let segmentEnd = endIndex;\r\n\r\n      // Try to break at a sentence boundary if we're not at the end\r\n      if (endIndex < content.length) {\r\n        const searchStart = Math.max(currentIndex, endIndex - 500);\r\n        const lastSentence = this.findLastSentenceBreak(\r\n          content,\r\n          searchStart,\r\n          endIndex\r\n        );\r\n        if (lastSentence > currentIndex) {\r\n          segmentEnd = lastSentence;\r\n        }\r\n      }\r\n\r\n      const segmentContent = content.substring(currentIndex, segmentEnd);\r\n      segments.push({\r\n        content: segmentContent,\r\n        startIndex: currentIndex,\r\n        endIndex: segmentEnd,\r\n      });\r\n\r\n      // Move to next segment with overlap\r\n      currentIndex = Math.max(currentIndex + 1, segmentEnd - overlapSize);\r\n    }\r\n\r\n    return segments;\r\n  }\r\n\r\n  /**\r\n   * Find the last sentence break within a range\r\n   */\r\n  private static findLastSentenceBreak(\r\n    content: string,\r\n    start: number,\r\n    end: number\r\n  ): number {\r\n    const searchContent = content.substring(start, end);\r\n    const sentenceBreaks = [\". \", \"! \", \"? \", \".\\n\", \"!\\n\", \"?\\n\"];\r\n\r\n    let lastBreak = -1;\r\n    sentenceBreaks.forEach((breakStr) => {\r\n      const index = searchContent.lastIndexOf(breakStr);\r\n      if (index > lastBreak) {\r\n        lastBreak = index + breakStr.length;\r\n      }\r\n    });\r\n\r\n    return lastBreak > -1 ? start + lastBreak : end;\r\n  }\r\n}\r\n","/**\r\n * Constants for NovelSynth\r\n * Centralized configuration values and prompts used throughout the extension\r\n */\r\n\r\nexport enum ContentType {\r\n  NOVEL = \"novel\",\r\n  ARTICLE = \"article\",\r\n  NEWS = \"news\",\r\n  TECHNICAL = \"technical\",\r\n  GENERIC = \"generic\",\r\n}\r\n\r\nexport enum PromptType {\r\n  ENHANCEMENT = \"enhancement\",\r\n  SUMMARY = \"summary\",\r\n  PERMANENT = \"permanent\",\r\n  WEBSITE = \"website\",\r\n  NOVEL = \"novel\",\r\n}\r\n\r\n// Default Enhancement Prompts\r\nexport const DEFAULT_ENHANCEMENT_PROMPTS = {\r\n  [ContentType.NOVEL]: `Please enhance this novel chapter translation with the following improvements:\r\n\r\n1. Fix grammatical errors, punctuation mistakes, and spelling issues\r\n2. Improve the narrative flow and overall readability\r\n3. Ensure consistent character voice, tone, and gender pronouns throughout\r\n4. Make dialogue sound more natural and conversational\r\n5. Refine descriptions to be more vivid and engaging\r\n6. Maintain the original plot points, character development, and story elements exactly\r\n7. Streamline overly verbose sections while preserving important details\r\n8. Ensure proper transitioning between scenes and ideas\r\n9. Add bold section headings at scene changes, POV shifts, or topic transitions\r\n10. **IMPORTANT:** Format game-like status windows, character stats, skill lists, or RPG system information into styled HTML boxes. Use a div with class=\"game-stats-box\" to contain the exact text.\r\n11. Remove any advertising code snippets or irrelevant promotional content\r\n\r\nKeep the core meaning of the original text intact while making it feel like a professionally translated novel.`,\r\n\r\n  [ContentType.ARTICLE]: `Please enhance this article with the following improvements:\r\n\r\n1. Fix grammatical errors, punctuation mistakes, and spelling issues\r\n2. Improve clarity and readability while maintaining technical accuracy\r\n3. Ensure consistent terminology and professional tone\r\n4. Enhance paragraph structure and logical flow\r\n5. Improve transitions between sections and ideas\r\n6. Make complex concepts more accessible without dumbing down the content\r\n7. Ensure proper formatting of lists, code snippets, and technical references\r\n8. Remove any advertising or irrelevant promotional content\r\n9. Maintain all original facts, data, and references exactly\r\n10. Preserve the author's intended message and conclusions`,\r\n\r\n  [ContentType.NEWS]: `Please enhance this news article with the following improvements:\r\n\r\n1. Fix grammatical errors, punctuation mistakes, and spelling issues\r\n2. Improve clarity and readability while maintaining journalistic integrity\r\n3. Ensure objective and professional tone throughout\r\n4. Enhance paragraph structure for better information flow\r\n5. Improve transitions between different aspects of the story\r\n6. Make complex information more accessible to general readers\r\n7. Ensure proper attribution and quote formatting\r\n8. Remove any advertising or irrelevant promotional content\r\n9. Maintain all original facts, sources, and quotes exactly\r\n10. Preserve the journalistic style and news format`,\r\n\r\n  [ContentType.TECHNICAL]: `Please enhance this technical documentation with the following improvements:\r\n\r\n1. Fix grammatical errors, punctuation mistakes, and spelling issues\r\n2. Improve clarity and technical accuracy\r\n3. Ensure consistent technical terminology and professional tone\r\n4. Enhance code examples and technical explanations\r\n5. Improve step-by-step instructions and procedures\r\n6. Make complex technical concepts more understandable\r\n7. Ensure proper formatting of code blocks, lists, and references\r\n8. Remove any advertising or irrelevant promotional content\r\n9. Maintain all original technical details, code, and specifications exactly\r\n10. Preserve the instructional format and technical accuracy`,\r\n\r\n  [ContentType.GENERIC]: `Please enhance this content with the following improvements:\r\n\r\n1. Fix grammatical errors, punctuation mistakes, and spelling issues\r\n2. Improve overall clarity and readability\r\n3. Ensure consistent tone and style throughout\r\n4. Enhance paragraph structure and logical flow\r\n5. Improve transitions between sections and ideas\r\n6. Make the content more engaging while preserving the original message\r\n7. Ensure proper formatting and structure\r\n8. Remove any advertising or irrelevant promotional content\r\n9. Maintain all original facts and key information exactly\r\n10. Preserve the author's intended message and style`,\r\n};\r\n\r\n// Default Summary Prompts\r\nexport const DEFAULT_SUMMARY_PROMPTS = {\r\n  [ContentType.NOVEL]: `Please generate a comprehensive summary of this novel chapter, ensuring the following aspects are covered:\r\n\r\n1. **Major Plot Points:** Detail the main sequence of events and key developments\r\n2. **Character Interactions & Development:** Describe significant character interactions and growth\r\n3. **Key Reveals & Information:** Mention crucial information, secrets, or plot twists\r\n4. **Setting & Atmosphere:** Include significant setting details and mood changes\r\n5. **Thematic Elements:** Touch upon central themes introduced or developed\r\n6. **Character Dynamics:** Highlight relationship changes or emotional shifts\r\n7. **Foreshadowing:** Note hints or setup for future events\r\n8. **Conflict & Tension:** Identify internal or external conflicts\r\n9. **Character Names & Titles:** Ensure accurate representation of all names\r\n10. **Important Objects or Artifacts:** Note significant items introduced\r\n\r\nThe summary must be thorough and accurate, capturing the essential substance of the chapter.`,\r\n\r\n  [ContentType.ARTICLE]: `Please generate a concise summary of this article, focusing on:\r\n\r\n1. **Main Topic:** Clearly identify the primary subject matter\r\n2. **Key Arguments:** Outline the main points and arguments presented\r\n3. **Evidence & Examples:** Summarize supporting evidence and examples\r\n4. **Conclusions:** Highlight the author's main conclusions or findings\r\n5. **Methodology:** If applicable, describe research methods or approaches\r\n6. **Implications:** Note broader implications or significance\r\n7. **Key Data:** Include important statistics or findings\r\n8. **Recommendations:** Summarize any recommendations made\r\n\r\nEnsure accuracy and include only information explicitly present in the article.`,\r\n\r\n  [ContentType.NEWS]: `Please generate a news summary covering:\r\n\r\n1. **Main Event:** Clearly describe what happened\r\n2. **Who:** Identify key people, organizations, or entities involved\r\n3. **When & Where:** Specify timing and location of events\r\n4. **Why:** Explain causes, motivations, or background\r\n5. **Impact:** Describe consequences or implications\r\n6. **Sources:** Note key sources and quotes\r\n7. **Context:** Provide relevant background information\r\n8. **Current Status:** Describe the current situation\r\n\r\nFollow journalistic standards and maintain objectivity throughout the summary.`,\r\n\r\n  [ContentType.TECHNICAL]: `Please generate a technical summary including:\r\n\r\n1. **Main Topic:** Identify the primary technical subject\r\n2. **Key Concepts:** Outline main technical concepts explained\r\n3. **Procedures:** Summarize step-by-step processes or methods\r\n4. **Requirements:** List prerequisites or requirements\r\n5. **Examples:** Note important code examples or demonstrations\r\n6. **Best Practices:** Highlight recommended approaches\r\n7. **Common Issues:** Mention troubleshooting or common problems\r\n8. **Tools & Technologies:** List relevant tools or technologies discussed\r\n\r\nMaintain technical accuracy and include all critical implementation details.`,\r\n\r\n  [ContentType.GENERIC]: `Please generate a comprehensive summary including:\r\n\r\n1. **Main Topic:** Clearly identify the primary subject\r\n2. **Key Points:** Outline the most important information\r\n3. **Structure:** Describe how the content is organized\r\n4. **Arguments:** Summarize main arguments or positions\r\n5. **Evidence:** Note supporting evidence or examples\r\n6. **Conclusions:** Highlight main takeaways or conclusions\r\n7. **Significance:** Explain the importance or relevance\r\n\r\nEnsure completeness while maintaining clarity and conciseness.`,\r\n};\r\n\r\n// Permanent Prompt (always appended)\r\nexport const PERMANENT_PROMPT = `\r\n\r\n**Formatting Requirements:**\r\n- Use only HTML paragraph tags (<p>) for each paragraph\r\n- Handle dialogue with appropriate punctuation and breaks\r\n- Do not use markdown formatting in your response\r\n- Preserve line breaks and paragraph structure\r\n- Maintain proper HTML formatting throughout`;\r\n\r\n// Website-specific prompts (for handlers)\r\nexport const WEBSITE_PROMPTS = {\r\n  \"fanfiction.net\":\r\n    \"This is a fanfiction from Fanfiction.net. Please maintain the author's style and any formatting features like section breaks, centered text, italics, etc. Respect any special formatting the author uses for dialogue, thoughts, flashbacks, or scene transitions.\",\r\n\r\n  \"archiveofourown.org\":\r\n    \"This is a fanfiction from Archive of Our Own. Please maintain the author's original style and respect any special formatting, tags, or content warnings. Preserve the unique voice and creative choices of the fan author.\",\r\n\r\n  \"ranobes.net\":\r\n    \"This is a machine-translated web novel from a Russian novel site. Please improve the translation while maintaining the original meaning and flow. Keep any special formatting like section breaks. Russian and Chinese names should be properly transliterated.\",\r\n\r\n  \"royalroad.com\":\r\n    \"This is a web novel from Royal Road. Please maintain the author's writing style and any LitRPG or fantasy elements. Preserve any stat blocks, skill descriptions, or game-like elements in proper formatting.\",\r\n\r\n  \"webnovel.com\":\r\n    \"This is a web novel that may include translated content. Please enhance readability while preserving cultural references and proper nouns. Maintain any cultivation, system, or fantasy elements appropriately.\",\r\n\r\n  \"geeksforgeeks.org\":\r\n    \"This is a technical article from GeeksforGeeks. Please maintain technical accuracy and preserve all code examples exactly. Enhance explanations for clarity while keeping the educational format.\",\r\n\r\n  \"medium.com\":\r\n    \"This is an article from Medium. Please maintain the author's personal voice and style while enhancing clarity and readability. Preserve any personal anecdotes or unique perspectives.\",\r\n\r\n  generic:\r\n    \"Please enhance this content while maintaining its original style, format, and intent.\",\r\n};\r\n\r\n// Novel-specific prompts (can be customized per novel)\r\nexport const NOVEL_PROMPTS = {\r\n  // These will be dynamically created and stored based on detected novels\r\n  default:\r\n    \"Please maintain consistency with the established characters, world-building, and narrative style of this novel series.\",\r\n};\r\n\r\n// Model configurations for different AI providers\r\nexport const AI_MODELS = {\r\n  gemini: [\r\n    { id: \"gemini-1.5-pro\", name: \"Gemini 1.5 Pro\", maxTokens: 2097152 },\r\n    { id: \"gemini-1.5-flash\", name: \"Gemini 1.5 Flash\", maxTokens: 1048576 },\r\n    { id: \"gemini-pro\", name: \"Gemini Pro\", maxTokens: 32768 },\r\n  ],\r\n  openai: [\r\n    { id: \"gpt-4-turbo\", name: \"GPT-4 Turbo\", maxTokens: 128000 },\r\n    { id: \"gpt-4\", name: \"GPT-4\", maxTokens: 32768 },\r\n    { id: \"gpt-3.5-turbo\", name: \"GPT-3.5 Turbo\", maxTokens: 16384 },\r\n  ],\r\n  anthropic: [\r\n    { id: \"claude-3-opus-20240229\", name: \"Claude 3 Opus\", maxTokens: 200000 },\r\n    {\r\n      id: \"claude-3-sonnet-20240229\",\r\n      name: \"Claude 3 Sonnet\",\r\n      maxTokens: 200000,\r\n    },\r\n    {\r\n      id: \"claude-3-haiku-20240307\",\r\n      name: \"Claude 3 Haiku\",\r\n      maxTokens: 200000,\r\n    },\r\n  ],\r\n  huggingface: [\r\n    { id: \"microsoft/DialoGPT-large\", name: \"DialoGPT Large\", maxTokens: 1024 },\r\n    {\r\n      id: \"facebook/blenderbot-400M-distill\",\r\n      name: \"BlenderBot 400M\",\r\n      maxTokens: 512,\r\n    },\r\n  ],\r\n  openrouter: [\r\n    {\r\n      id: \"meta-llama/llama-3.2-3b-instruct:free\",\r\n      name: \"Llama 3.2 3B (Free)\",\r\n      maxTokens: 32768,\r\n    },\r\n    {\r\n      id: \"microsoft/wizardlm-2-8x22b\",\r\n      name: \"WizardLM-2 8x22B\",\r\n      maxTokens: 65536,\r\n    },\r\n    {\r\n      id: \"anthropic/claude-3.5-sonnet\",\r\n      name: \"Claude 3.5 Sonnet\",\r\n      maxTokens: 200000,\r\n    },\r\n  ],\r\n};\r\n\r\n// Default chunk size for large content (characters per segment)\r\nexport const DEFAULT_CHUNK_SIZE = 12000;\r\n\r\n// Rate limit settings\r\nexport const RATE_LIMIT_WAIT_TIME = 300000; // 5 minutes\r\n\r\n// Default settings\r\nexport const DEFAULT_SETTINGS = {\r\n  selectedProvider: \"gemini\",\r\n  selectedModel: \"gemini-1.5-pro\",\r\n  enabledHandlers: [\r\n    \"fanfiction.net\",\r\n    \"archiveofourown.org\",\r\n    \"royalroad.com\",\r\n    \"webnovel.com\",\r\n    \"geeksforgeeks.org\",\r\n    \"medium.com\",\r\n  ],\r\n  apiKeys: {},\r\n  customPrompts: {\r\n    enhancement: {},\r\n    summary: {},\r\n    website: {},\r\n    novel: {},\r\n  },\r\n  autoDetectContentType: true,\r\n  showWordCount: true,\r\n  showProcessingBanner: true,\r\n};\r\n\r\n// Content type detection patterns\r\nexport const CONTENT_TYPE_PATTERNS = {\r\n  [ContentType.NOVEL]: {\r\n    domains: [\r\n      \"fanfiction.net\",\r\n      \"archiveofourown.org\",\r\n      \"royalroad.com\",\r\n      \"webnovel.com\",\r\n      \"ranobes.net\",\r\n    ],\r\n    pathPatterns: [\"/chapter\", \"/story\", \"/fiction\", \"/novel\"],\r\n    contentIndicators: [\"chapter\", \"volume\", \"protagonist\", \"dialogue\"],\r\n  },\r\n  [ContentType.TECHNICAL]: {\r\n    domains: [\r\n      \"geeksforgeeks.org\",\r\n      \"stackoverflow.com\",\r\n      \"developer.mozilla.org\",\r\n      \"docs.microsoft.com\",\r\n    ],\r\n    pathPatterns: [\"/tutorial\", \"/guide\", \"/docs\", \"/api\"],\r\n    contentIndicators: [\r\n      \"code\",\r\n      \"function\",\r\n      \"class\",\r\n      \"algorithm\",\r\n      \"implementation\",\r\n    ],\r\n  },\r\n  [ContentType.NEWS]: {\r\n    domains: [\"cnn.com\", \"bbc.com\", \"reuters.com\", \"ap.org\", \"news.com\"],\r\n    pathPatterns: [\"/news\", \"/politics\", \"/world\", \"/business\"],\r\n    contentIndicators: [\"breaking\", \"reported\", \"according to\", \"sources say\"],\r\n  },\r\n  [ContentType.ARTICLE]: {\r\n    domains: [\"medium.com\", \"substack.com\", \"blog.\", \"wordpress.com\"],\r\n    pathPatterns: [\"/article\", \"/post\", \"/blog\"],\r\n    contentIndicators: [\"author\", \"published\", \"opinion\", \"analysis\"],\r\n  },\r\n};\r\n\r\nexport default {\r\n  ContentType,\r\n  PromptType,\r\n  DEFAULT_ENHANCEMENT_PROMPTS,\r\n  DEFAULT_SUMMARY_PROMPTS,\r\n  PERMANENT_PROMPT,\r\n  WEBSITE_PROMPTS,\r\n  NOVEL_PROMPTS,\r\n  AI_MODELS,\r\n  DEFAULT_CHUNK_SIZE,\r\n  RATE_LIMIT_WAIT_TIME,\r\n  DEFAULT_SETTINGS,\r\n  CONTENT_TYPE_PATTERNS,\r\n};\r\n","import { GeminiService } from \"./GeminiService\";\r\nimport { OpenAIService } from \"./OpenAIService\";\r\nimport { HuggingFaceService } from \"./HuggingFaceService\";\r\nimport { AnthropicService } from \"./AnthropicService\";\r\nimport { OpenRouterService } from \"./OpenRouterService\";\r\nimport type {\r\n  AIProvider,\r\n  AIResponse,\r\n  UserSettings,\r\n  AIModel,\r\n  ContentSegment,\r\n} from \"../../types\";\r\nimport { BaseAIService } from \"./BaseAIService\";\r\nimport { RateLimiter } from \"../../utils/RateLimiter\";\r\nimport { ContentSegmenter } from \"../../utils/ContentSegmenter\";\r\nimport { AI_MODELS } from \"../../utils/PromptManager\";\r\n\r\nexport class AIServiceManager {\r\n  private services: Map<string, BaseAIService> = new Map();\r\n  private currentService: BaseAIService | null = null;\r\n  private currentSettings: UserSettings | null = null;\r\n\r\n  constructor() {\r\n    this.initializeServices();\r\n  }\r\n\r\n  private initializeServices(): void {\r\n    const services = [\r\n      new GeminiService(),\r\n      new OpenAIService(),\r\n      new HuggingFaceService(),\r\n      new AnthropicService(),\r\n      new OpenRouterService(),\r\n    ];\r\n\r\n    services.forEach((service) => {\r\n      this.services.set(service.provider.id, service);\r\n    });\r\n  }\r\n\r\n  getAvailableProviders(): AIProvider[] {\r\n    return Array.from(this.services.values()).map(\r\n      (service) => service.provider\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get available models for a specific provider\r\n   */\r\n  getAvailableModels(providerId: string): AIModel[] {\r\n    return AI_MODELS[providerId as keyof typeof AI_MODELS] || [];\r\n  }\r\n\r\n  /**\r\n   * Get all available models across all providers\r\n   */\r\n  getAllAvailableModels(): Record<string, AIModel[]> {\r\n    const result: Record<string, AIModel[]> = {};\r\n    this.getAvailableProviders().forEach((provider) => {\r\n      result[provider.id] = this.getAvailableModels(provider.id);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  async setActiveProvider(\r\n    providerId: string,\r\n    apiKey?: string\r\n  ): Promise<boolean> {\r\n    const service = this.services.get(providerId);\r\n    if (!service) {\r\n      console.error(`AI provider '${providerId}' not found`);\r\n      return false;\r\n    }\r\n\r\n    if (apiKey) {\r\n      service.setApiKey(apiKey);\r\n    }\r\n\r\n    this.currentService = service;\r\n    return true;\r\n  }\r\n\r\n  getCurrentProvider(): AIProvider | null {\r\n    return this.currentService?.provider || null;\r\n  }\r\n\r\n  /**\r\n   * Enhanced method with rate limiting and segmentation support\r\n   */\r\n  async enhance(\r\n    content: string,\r\n    prompt: string,\r\n    featureType:\r\n      | \"enhance\"\r\n      | \"summarize\"\r\n      | \"analyze\"\r\n      | \"suggestions\" = \"enhance\",\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    if (!this.currentService || !this.currentSettings) {\r\n      return { error: \"No AI provider selected or settings not loaded\" };\r\n    }\r\n\r\n    try {\r\n      const modelId = this.currentSettings.selectedModels[featureType];\r\n      const model = this.getModelById(this.currentService.provider.id, modelId);\r\n\r\n      if (!model) {\r\n        return {\r\n          error: `Model ${modelId} not found for provider ${this.currentService.provider.id}`,\r\n        };\r\n      }\r\n\r\n      // Check if content needs segmentation\r\n      const shouldSegment = content.length > model.maxTokens * 3; // Rough token estimation\r\n\r\n      if (shouldSegment) {\r\n        return await this.enhanceWithSegmentation(\r\n          content,\r\n          prompt,\r\n          model,\r\n          options\r\n        );\r\n      } else {\r\n        return await this.enhanceSingleContent(content, prompt, model, options);\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        error: `Service error: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle large content with segmentation\r\n   */\r\n  private async enhanceWithSegmentation(\r\n    content: string,\r\n    prompt: string,\r\n    model: AIModel,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    const segments = ContentSegmenter.segmentContent(content, {\r\n      maxChunkSize: Math.floor(model.maxTokens * 2.5), // Conservative token estimation\r\n      preserveImages: true,\r\n      preserveFormatting: true,\r\n    });\r\n\r\n    const enhancedSegments: ContentSegment[] = [];\r\n    let totalProcessingTime = 0;\r\n    let hasError = false;\r\n    let errorMessage = \"\";\r\n\r\n    for (const segment of segments) {\r\n      // Apply rate limiting\r\n      if (this.currentSettings?.rateLimiting.enabled) {\r\n        await RateLimiter.waitForRateLimit(\r\n          this.currentService!.provider.id,\r\n          model\r\n        );\r\n      }\r\n\r\n      const segmentPrompt = `${prompt}\\n\\n**Important:** This is part ${\r\n        segments.indexOf(segment) + 1\r\n      } of ${\r\n        segments.length\r\n      } segments. Maintain consistency with the overall content style and formatting.`;\r\n\r\n      try {\r\n        const response = await this.currentService!.enhance(\r\n          segment.content,\r\n          segmentPrompt,\r\n          { ...options, model: model.id }\r\n        );\r\n\r\n        if (response.error) {\r\n          hasError = true;\r\n          errorMessage = response.error;\r\n          break;\r\n        }\r\n\r\n        enhancedSegments.push({\r\n          ...segment,\r\n          content: response.enhanced || segment.content,\r\n        });\r\n\r\n        totalProcessingTime += response.processingTime || 0;\r\n\r\n        // Record rate limit usage\r\n        RateLimiter.recordRequest(this.currentService!.provider.id, model);\r\n      } catch (error) {\r\n        hasError = true;\r\n        errorMessage = error instanceof Error ? error.message : \"Unknown error\";\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (hasError) {\r\n      return { error: errorMessage };\r\n    }\r\n\r\n    // Reassemble segments\r\n    const enhancedContent =\r\n      ContentSegmenter.reassembleSegments(enhancedSegments);\r\n\r\n    return {\r\n      enhanced: enhancedContent,\r\n      processingTime: totalProcessingTime,\r\n      // Note: Stats will be approximate for segmented content\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handle single content enhancement with rate limiting\r\n   */\r\n  private async enhanceSingleContent(\r\n    content: string,\r\n    prompt: string,\r\n    model: AIModel,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    // Apply rate limiting\r\n    if (this.currentSettings?.rateLimiting.enabled) {\r\n      await RateLimiter.waitForRateLimit(\r\n        this.currentService!.provider.id,\r\n        model\r\n      );\r\n    }\r\n\r\n    try {\r\n      const response = await this.currentService!.enhance(content, prompt, {\r\n        ...options,\r\n        model: model.id,\r\n      });\r\n\r\n      // Record rate limit usage\r\n      RateLimiter.recordRequest(this.currentService!.provider.id, model);\r\n\r\n      return response;\r\n    } catch (error) {\r\n      return {\r\n        error: `Enhancement failed: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get model by ID for a provider\r\n   */\r\n  private getModelById(providerId: string, modelId: string): AIModel | null {\r\n    const models = this.getAvailableModels(providerId);\r\n    return models.find((model) => model.id === modelId) || null;\r\n  }\r\n\r\n  async summarize(content: string, options?: any): Promise<AIResponse> {\r\n    if (!this.currentService || !this.currentSettings) {\r\n      return { error: \"No AI provider selected or settings not loaded\" };\r\n    }\r\n\r\n    try {\r\n      const modelId = this.currentSettings.selectedModels.summarize;\r\n      const model = this.getModelById(this.currentService.provider.id, modelId);\r\n\r\n      if (!model) {\r\n        return { error: `Model ${modelId} not found` };\r\n      }\r\n\r\n      // Apply rate limiting\r\n      if (this.currentSettings.rateLimiting.enabled) {\r\n        await RateLimiter.waitForRateLimit(\r\n          this.currentService.provider.id,\r\n          model\r\n        );\r\n      }\r\n\r\n      const response = await this.currentService.summarize(content, {\r\n        ...options,\r\n        model: model.id,\r\n      });\r\n\r\n      // Record rate limit usage\r\n      RateLimiter.recordRequest(this.currentService.provider.id, model);\r\n\r\n      return response;\r\n    } catch (error) {\r\n      return {\r\n        error: `Service error: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async analyze(content: string, options?: any): Promise<AIResponse> {\r\n    if (!this.currentService || !this.currentSettings) {\r\n      return { error: \"No AI provider selected or settings not loaded\" };\r\n    }\r\n\r\n    try {\r\n      const modelId = this.currentSettings.selectedModels.analyze;\r\n      const model = this.getModelById(this.currentService.provider.id, modelId);\r\n\r\n      if (!model) {\r\n        return { error: `Model ${modelId} not found` };\r\n      }\r\n\r\n      // Apply rate limiting\r\n      if (this.currentSettings.rateLimiting.enabled) {\r\n        await RateLimiter.waitForRateLimit(\r\n          this.currentService.provider.id,\r\n          model\r\n        );\r\n      }\r\n\r\n      const response = await this.currentService.analyze(content, {\r\n        ...options,\r\n        model: model.id,\r\n      });\r\n\r\n      // Record rate limit usage\r\n      RateLimiter.recordRequest(this.currentService.provider.id, model);\r\n\r\n      return response;\r\n    } catch (error) {\r\n      return {\r\n        error: `Service error: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async generateSuggestions(\r\n    content: string,\r\n    options?: any\r\n  ): Promise<AIResponse> {\r\n    if (!this.currentService || !this.currentSettings) {\r\n      return { error: \"No AI provider selected or settings not loaded\" };\r\n    }\r\n\r\n    try {\r\n      const modelId = this.currentSettings.selectedModels.suggestions;\r\n      const model = this.getModelById(this.currentService.provider.id, modelId);\r\n\r\n      if (!model) {\r\n        return { error: `Model ${modelId} not found` };\r\n      }\r\n\r\n      // Apply rate limiting\r\n      if (this.currentSettings.rateLimiting.enabled) {\r\n        await RateLimiter.waitForRateLimit(\r\n          this.currentService.provider.id,\r\n          model\r\n        );\r\n      }\r\n\r\n      const response = await this.currentService.generateSuggestions(content, {\r\n        ...options,\r\n        model: model.id,\r\n      });\r\n\r\n      // Record rate limit usage\r\n      RateLimiter.recordRequest(this.currentService.provider.id, model);\r\n\r\n      return response;\r\n    } catch (error) {\r\n      return {\r\n        error: `Service error: ${\r\n          error instanceof Error ? error.message : \"Unknown error\"\r\n        }`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async loadSettingsAndInitialize(settings: UserSettings): Promise<void> {\r\n    this.currentSettings = settings;\r\n    const { selectedProvider, apiKeys } = settings;\r\n\r\n    if (selectedProvider && apiKeys[selectedProvider]) {\r\n      await this.setActiveProvider(selectedProvider, apiKeys[selectedProvider]);\r\n    } else {\r\n      // Default to first available provider\r\n      const providers = this.getAvailableProviders();\r\n      if (providers.length > 0) {\r\n        await this.setActiveProvider(providers[0].id);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import type { SiteHandler } from \"../../types\";\r\n\r\nexport const fanfictionHandler: SiteHandler = {\r\n  name: \"FanFiction.Net\",\r\n  domains: [\"fanfiction.net\", \"www.fanfiction.net\", \"m.fanfiction.net\"],\r\n  selectors: {\r\n    title: \".storytitle\",\r\n    content: \"#storytext\",\r\n    author: \".xcontrast_txt\",\r\n    chapter: \".storytitle\",\r\n    next: '[title=\"Next Chapter\"]',\r\n    previous: '[title=\"Previous Chapter\"]',\r\n  },\r\n  isEnabled: true,\r\n  priority: 1,\r\n};\r\n","import type { SiteHandler } from \"../../types\";\r\n\r\nexport const archiveOfOurOwnHandler: SiteHandler = {\r\n  name: \"Archive of Our Own\",\r\n  domains: [\"archiveofourown.org\", \"ao3.org\"],\r\n  selectors: {\r\n    title: \".title.heading\",\r\n    content: \".userstuff.module\",\r\n    author: '.byline.heading a[rel=\"author\"]',\r\n    chapter: \".title.heading\",\r\n    next: '.navigation.actions a[title=\"Next Chapter\"]',\r\n    previous: '.navigation.actions a[title=\"Previous Chapter\"]',\r\n  },\r\n  isEnabled: true,\r\n  priority: 1,\r\n};\r\n","import type { SiteHandler } from \"../../types\";\r\n\r\nexport const royalRoadHandler: SiteHandler = {\r\n  name: \"Royal Road\",\r\n  domains: [\"royalroad.com\", \"www.royalroad.com\"],\r\n  selectors: {\r\n    title: \".fic-title h1\",\r\n    content: \".chapter-content\",\r\n    author: \".fic-title .author\",\r\n    chapter: \".chapter-title\",\r\n    next: '.nav-buttons .btn:contains(\"Next Chapter\")',\r\n    previous: '.nav-buttons .btn:contains(\"Previous Chapter\")',\r\n  },\r\n  isEnabled: true,\r\n  priority: 1,\r\n};\r\n","import type { SiteHandler } from \"../../types\";\r\n\r\nexport const webnovelHandler: SiteHandler = {\r\n  name: \"WebNovel.com\",\r\n  domains: [\"webnovel.com\", \"www.webnovel.com\"],\r\n  selectors: {\r\n    title: \".det-hd h1\",\r\n    content: \".cha-content .cha-words\",\r\n    author: \".det-hd .author\",\r\n    chapter: \".cha-tit\",\r\n    next: \".cha-nav .j_next_chapter\",\r\n    previous: \".cha-nav .j_pre_chapter\",\r\n  },\r\n  isEnabled: true,\r\n  priority: 1,\r\n};\r\n","import type { SiteHandler } from \"../../types\";\r\n\r\nexport const geeksForGeeksHandler: SiteHandler = {\r\n  name: \"GeeksforGeeks\",\r\n  domains: [\"geeksforgeeks.org\", \"www.geeksforgeeks.org\"],\r\n  selectors: {\r\n    title: \".article-title\",\r\n    content: \".content, .text, article\",\r\n    author: \".author-name\",\r\n    chapter: \".article-title\",\r\n    next: \".next-article\",\r\n    previous: \".prev-article\",\r\n  },\r\n  isEnabled: true,\r\n  priority: 1,\r\n};\r\n","import type { SiteHandler } from \"../../types\";\r\n\r\nexport const mediumHandler: SiteHandler = {\r\n  name: \"Medium\",\r\n  domains: [\r\n    \"medium.com\",\r\n    \"towardsdatascience.com\",\r\n    \"javascript.plainenglish.io\",\r\n  ],\r\n  selectors: {\r\n    title: 'h1[data-testid=\"storyTitle\"]',\r\n    content: \"article section\",\r\n    author: '[data-testid=\"authorName\"]',\r\n    chapter: 'h1[data-testid=\"storyTitle\"]',\r\n    next: \".next-story\",\r\n    previous: \".prev-story\",\r\n  },\r\n  isEnabled: true,\r\n  priority: 1,\r\n};\r\n","import type { SiteHandler } from \"../../types\";\r\n\r\nexport const genericNewsHandler: SiteHandler = {\r\n  name: \"Generic News\",\r\n  domains: [\r\n    \"cnn.com\",\r\n    \"bbc.com\",\r\n    \"reuters.com\",\r\n    \"news.ycombinator.com\",\r\n    \"techcrunch.com\",\r\n    \"theverge.com\",\r\n  ],\r\n  selectors: {\r\n    title: \"h1, .headline, .article-title\",\r\n    content: \".article-content, .story-body, .post-content, article\",\r\n    author: \".byline, .author, .article-author\",\r\n    chapter: \"h1, .headline\",\r\n    next: \".next-article, .pagination-next\",\r\n    previous: \".prev-article, .pagination-prev\",\r\n  },\r\n  isEnabled: true,\r\n  priority: 0,\r\n};\r\n","import type { SiteHandler } from \"../../types\";\r\nimport { fanfictionHandler } from \"./fanfiction\";\r\nimport { archiveOfOurOwnHandler } from \"./archiveOfOurOwn\";\r\nimport { royalRoadHandler } from \"./royalRoad\";\r\nimport { webnovelHandler } from \"./webnovel\";\r\nimport { geeksForGeeksHandler } from \"./geeksForGeeks\";\r\nimport { mediumHandler } from \"./medium\";\r\nimport { genericNewsHandler } from \"./genericNews\";\r\n\r\nexport class SiteHandlerManager {\r\n  private handlers: SiteHandler[] = [];\r\n  private enabledHandlers: Set<string> = new Set();\r\n\r\n  constructor() {\r\n    this.initializeHandlers();\r\n  }\r\n\r\n  private initializeHandlers(): void {\r\n    this.handlers = [\r\n      fanfictionHandler,\r\n      archiveOfOurOwnHandler,\r\n      royalRoadHandler,\r\n      webnovelHandler,\r\n      geeksForGeeksHandler,\r\n      mediumHandler,\r\n      genericNewsHandler,\r\n    ].sort((a, b) => b.priority - a.priority); // Sort by priority descending\r\n\r\n    // Enable all handlers by default\r\n    this.handlers.forEach((handler) => {\r\n      if (handler.isEnabled) {\r\n        this.enabledHandlers.add(handler.name);\r\n      }\r\n    });\r\n  }\r\n\r\n  getHandlers(): SiteHandler[] {\r\n    return this.handlers.filter((handler) =>\r\n      this.enabledHandlers.has(handler.name)\r\n    );\r\n  }\r\n\r\n  getAllHandlers(): SiteHandler[] {\r\n    return [...this.handlers];\r\n  }\r\n\r\n  getHandlerForDomain(domain: string): SiteHandler | null {\r\n    const enabledHandlers = this.getHandlers();\r\n\r\n    for (const handler of enabledHandlers) {\r\n      for (const handlerDomain of handler.domains) {\r\n        if (domain.includes(handlerDomain) || handlerDomain.includes(domain)) {\r\n          return handler;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  enableHandler(handlerName: string): void {\r\n    const handler = this.handlers.find((h) => h.name === handlerName);\r\n    if (handler) {\r\n      this.enabledHandlers.add(handlerName);\r\n    }\r\n  }\r\n\r\n  disableHandler(handlerName: string): void {\r\n    this.enabledHandlers.delete(handlerName);\r\n  }\r\n\r\n  isHandlerEnabled(handlerName: string): boolean {\r\n    return this.enabledHandlers.has(handlerName);\r\n  }\r\n\r\n  updateHandlerSettings(enabledHandlers: string[]): void {\r\n    this.enabledHandlers.clear();\r\n    enabledHandlers.forEach((name) => this.enabledHandlers.add(name));\r\n  }\r\n\r\n  /**\r\n   * Add a custom handler at runtime\r\n   */\r\n  addCustomHandler(handler: SiteHandler): void {\r\n    // Check if handler with same name already exists\r\n    const existingIndex = this.handlers.findIndex(\r\n      (h) => h.name === handler.name\r\n    );\r\n\r\n    if (existingIndex >= 0) {\r\n      // Replace existing handler\r\n      this.handlers[existingIndex] = handler;\r\n    } else {\r\n      // Add new handler\r\n      this.handlers.push(handler);\r\n      // Re-sort by priority\r\n      this.handlers.sort((a, b) => b.priority - a.priority);\r\n    }\r\n\r\n    if (handler.isEnabled) {\r\n      this.enabledHandlers.add(handler.name);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a handler\r\n   */\r\n  removeHandler(handlerName: string): boolean {\r\n    const index = this.handlers.findIndex((h) => h.name === handlerName);\r\n    if (index >= 0) {\r\n      this.handlers.splice(index, 1);\r\n      this.enabledHandlers.delete(handlerName);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import type { UserSettings, CustomPrompts } from \"../types\";\r\n\r\nexport class StorageManager {\r\n  private static readonly STORAGE_KEY = \"novelsynth_settings\";\r\n  private static readonly DEFAULT_SETTINGS: UserSettings = {\r\n    selectedProvider: \"gemini\",\r\n    selectedModels: {\r\n      enhance: \"gemini-1.5-flash\",\r\n      summarize: \"gemini-1.5-flash\",\r\n      analyze: \"gemini-1.5-flash\",\r\n      suggestions: \"gemini-1.5-flash\",\r\n    },\r\n    apiKeys: {},\r\n    enabledFeatures: [\"summarize\", \"analyze\", \"suggestions\", \"enhance\"],\r\n    enabledHandlers: [\r\n      \"FanFiction.Net\",\r\n      \"Archive of Our Own\",\r\n      \"Royal Road\",\r\n      \"WebNovel.com\",\r\n      \"GeeksforGeeks\",\r\n      \"Medium\",\r\n      \"Generic News\",\r\n    ],\r\n    theme: \"auto\",\r\n    customPrompts: {\r\n      enhancement: {},\r\n      summary: {},\r\n      permanent: {},\r\n      website: {},\r\n      novel: {},\r\n    },\r\n    autoDetectContentType: true,\r\n    showWordCount: true,\r\n    showProcessingBanner: true,\r\n    rateLimiting: {\r\n      enabled: true,\r\n      waitTime: 1000,\r\n      retryAttempts: 3,\r\n    },\r\n  };\r\n\r\n  static async getSettings(): Promise<UserSettings> {\r\n    try {\r\n      const result = await chrome.storage.sync.get(this.STORAGE_KEY);\r\n      const stored = result[this.STORAGE_KEY];\r\n\r\n      if (stored) {\r\n        // Merge with defaults to ensure all properties exist\r\n        return { ...this.DEFAULT_SETTINGS, ...stored };\r\n      }\r\n\r\n      return this.DEFAULT_SETTINGS;\r\n    } catch (error) {\r\n      console.error(\"Failed to load settings:\", error);\r\n      return this.DEFAULT_SETTINGS;\r\n    }\r\n  }\r\n\r\n  static async saveSettings(settings: Partial<UserSettings>): Promise<boolean> {\r\n    try {\r\n      const currentSettings = await this.getSettings();\r\n      const updatedSettings = { ...currentSettings, ...settings };\r\n\r\n      await chrome.storage.sync.set({\r\n        [this.STORAGE_KEY]: updatedSettings,\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Failed to save settings:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static async updateApiKey(\r\n    provider: string,\r\n    apiKey: string\r\n  ): Promise<boolean> {\r\n    try {\r\n      const settings = await this.getSettings();\r\n      settings.apiKeys[provider] = apiKey;\r\n      return await this.saveSettings(settings);\r\n    } catch (error) {\r\n      console.error(\"Failed to update API key:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static async removeApiKey(provider: string): Promise<boolean> {\r\n    try {\r\n      const settings = await this.getSettings();\r\n      delete settings.apiKeys[provider];\r\n      return await this.saveSettings(settings);\r\n    } catch (error) {\r\n      console.error(\"Failed to remove API key:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static async setSelectedProvider(provider: string): Promise<boolean> {\r\n    return await this.saveSettings({ selectedProvider: provider });\r\n  }\r\n\r\n  static async setSelectedModel(\r\n    featureType: keyof UserSettings[\"selectedModels\"],\r\n    modelId: string\r\n  ): Promise<boolean> {\r\n    try {\r\n      const settings = await this.getSettings();\r\n      const updatedModels = {\r\n        ...settings.selectedModels,\r\n        [featureType]: modelId,\r\n      };\r\n      return await this.saveSettings({ selectedModels: updatedModels });\r\n    } catch (error) {\r\n      console.error(\"Failed to set selected model:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static async setSelectedModels(\r\n    models: Partial<UserSettings[\"selectedModels\"]>\r\n  ): Promise<boolean> {\r\n    try {\r\n      const settings = await this.getSettings();\r\n      const updatedModels = {\r\n        ...settings.selectedModels,\r\n        ...models,\r\n      };\r\n      return await this.saveSettings({ selectedModels: updatedModels });\r\n    } catch (error) {\r\n      console.error(\"Failed to set selected models:\", error);\r\n      return false;\r\n    }\r\n  }\r\n  static async setCustomPrompt(\r\n    promptType: keyof CustomPrompts,\r\n    promptKey: string,\r\n    promptValue: string\r\n  ): Promise<boolean> {\r\n    try {\r\n      const settings = await this.getSettings();\r\n      const currentPrompts = settings.customPrompts || {\r\n        enhancement: {},\r\n        summary: {},\r\n        permanent: {},\r\n        website: {},\r\n        novel: {},\r\n      };\r\n\r\n      const updatedPrompts = {\r\n        ...currentPrompts,\r\n      };\r\n\r\n      updatedPrompts[promptType] = {\r\n        ...currentPrompts[promptType],\r\n        [promptKey]: promptValue,\r\n      };\r\n\r\n      return await this.saveSettings({ customPrompts: updatedPrompts });\r\n    } catch (error) {\r\n      console.error(\"Failed to set custom prompt:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static async removeCustomPrompt(\r\n    promptType: keyof CustomPrompts,\r\n    promptKey: string\r\n  ): Promise<boolean> {\r\n    try {\r\n      const settings = await this.getSettings();\r\n      if (!settings.customPrompts) return true;\r\n\r\n      const updatedPrompts = {\r\n        ...settings.customPrompts,\r\n      };\r\n\r\n      updatedPrompts[promptType] = {\r\n        ...settings.customPrompts[promptType],\r\n      };\r\n\r\n      delete updatedPrompts[promptType][promptKey];\r\n\r\n      return await this.saveSettings({ customPrompts: updatedPrompts });\r\n    } catch (error) {\r\n      console.error(\"Failed to remove custom prompt:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static async setRateLimitingSettings(\r\n    rateLimiting: Partial<UserSettings[\"rateLimiting\"]>\r\n  ): Promise<boolean> {\r\n    try {\r\n      const settings = await this.getSettings();\r\n      const updatedRateLimiting = {\r\n        ...settings.rateLimiting,\r\n        ...rateLimiting,\r\n      };\r\n      return await this.saveSettings({ rateLimiting: updatedRateLimiting });\r\n    } catch (error) {\r\n      console.error(\"Failed to set rate limiting settings:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static async setContentDetectionSettings(settings: {\r\n    autoDetectContentType?: boolean;\r\n    showWordCount?: boolean;\r\n    showProcessingBanner?: boolean;\r\n  }): Promise<boolean> {\r\n    return await this.saveSettings(settings);\r\n  }\r\n\r\n  static async toggleFeature(feature: string): Promise<boolean> {\r\n    try {\r\n      const settings = await this.getSettings();\r\n      const enabledFeatures = [...settings.enabledFeatures];\r\n\r\n      const index = enabledFeatures.indexOf(feature);\r\n      if (index >= 0) {\r\n        enabledFeatures.splice(index, 1);\r\n      } else {\r\n        enabledFeatures.push(feature);\r\n      }\r\n\r\n      return await this.saveSettings({ enabledFeatures });\r\n    } catch (error) {\r\n      console.error(\"Failed to toggle feature:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static async toggleHandler(handler: string): Promise<boolean> {\r\n    try {\r\n      const settings = await this.getSettings();\r\n      const enabledHandlers = [...settings.enabledHandlers];\r\n\r\n      const index = enabledHandlers.indexOf(handler);\r\n      if (index >= 0) {\r\n        enabledHandlers.splice(index, 1);\r\n      } else {\r\n        enabledHandlers.push(handler);\r\n      }\r\n\r\n      return await this.saveSettings({ enabledHandlers });\r\n    } catch (error) {\r\n      console.error(\"Failed to toggle handler:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static async clearAllData(): Promise<boolean> {\r\n    try {\r\n      await chrome.storage.sync.remove(this.STORAGE_KEY);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Failed to clear data:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Listen for storage changes\r\n  static onSettingsChanged(callback: (settings: UserSettings) => void): void {\r\n    chrome.storage.onChanged.addListener((changes, area) => {\r\n      if (area === \"sync\" && changes[this.STORAGE_KEY]) {\r\n        const newSettings = changes[this.STORAGE_KEY].newValue;\r\n        if (newSettings) {\r\n          callback({ ...this.DEFAULT_SETTINGS, ...newSettings });\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { AIServiceManager } from \"../services/ai/AIServiceManager\";\r\nimport { SiteHandlerManager } from \"../services/handlers/SiteHandlerManager\";\r\nimport { StorageManager } from \"../utils/StorageManager\";\r\nimport type { ExtensionMessage, ContentAnalysis, AIResponse } from \"../types\";\r\n\r\nclass BackgroundService {\r\n  private aiManager: AIServiceManager;\r\n  private handlerManager: SiteHandlerManager;\r\n\r\n  constructor() {\r\n    this.aiManager = new AIServiceManager();\r\n    this.handlerManager = new SiteHandlerManager();\r\n    this.init();\r\n  }\r\n\r\n  private async init(): Promise<void> {\r\n    // Load user settings and initialize services\r\n    const settings = await StorageManager.getSettings();\r\n    await this.aiManager.loadSettingsAndInitialize(settings);\r\n    this.handlerManager.updateHandlerSettings(settings.enabledHandlers); // Listen for messages from content scripts and popup\r\n    chrome.runtime.onMessage.addListener(\r\n      (\r\n        message: ExtensionMessage,\r\n        sender: chrome.runtime.MessageSender,\r\n        sendResponse: (response?: any) => void\r\n      ) => {\r\n        this.handleMessage(message, sender, sendResponse);\r\n        return true; // Keep the message channel open for async response\r\n      }\r\n    );\r\n\r\n    // Listen for settings changes\r\n    StorageManager.onSettingsChanged(async (settings) => {\r\n      await this.aiManager.loadSettingsAndInitialize(settings);\r\n      this.handlerManager.updateHandlerSettings(settings.enabledHandlers);\r\n    });\r\n\r\n    console.log(\"NovelSynth background service initialized\");\r\n  }\r\n\r\n  private async handleMessage(\r\n    message: ExtensionMessage,\r\n    sender: chrome.runtime.MessageSender,\r\n    sendResponse: (response?: any) => void\r\n  ): Promise<void> {\r\n    try {\r\n      switch (message.type) {\r\n        case \"ANALYZE_CONTENT\":\r\n          await this.handleAnalyzeContent(message.payload, sendResponse);\r\n          break;\r\n        case \"GET_AI_RESPONSE\":\r\n          await this.handleGetAIResponse(message.payload, sendResponse);\r\n          break;\r\n\r\n        case \"GET_AVAILABLE_MODELS\":\r\n          await this.handleGetAvailableModels(message.payload, sendResponse);\r\n          break;\r\n\r\n        case \"GET_SETTINGS\":\r\n          await this.handleGetSettings(sendResponse);\r\n          break;\r\n\r\n        case \"UPDATE_SETTINGS\":\r\n          await this.handleUpdateSettings(message.payload, sendResponse);\r\n          break;\r\n\r\n        default:\r\n          sendResponse({ error: \"Unknown message type\" });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error handling message:\", error);\r\n      sendResponse({\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n      });\r\n    }\r\n  }\r\n\r\n  private async handleAnalyzeContent(\r\n    payload: { content: string; url: string },\r\n    sendResponse: (response: any) => void\r\n  ): Promise<void> {\r\n    const { content, url } = payload;\r\n    const domain = new URL(url).hostname;\r\n\r\n    // Get appropriate handler for the domain\r\n    const handler = this.handlerManager.getHandlerForDomain(domain);\r\n    const handlers = handler ? [handler] : this.handlerManager.getHandlers();\r\n\r\n    // Import ContentDetector dynamically to avoid circular dependencies\r\n    const { ContentDetector } = await import(\"../utils/ContentDetector\");\r\n\r\n    // Analyze content\r\n    const analysis = ContentDetector.analyzeContent(handlers);\r\n\r\n    sendResponse({\r\n      analysis,\r\n      handler: handler?.name || \"Generic\",\r\n      success: true,\r\n    });\r\n  }\r\n  private async handleGetAIResponse(\r\n    payload: {\r\n      type: \"enhance\" | \"summarize\" | \"analyze\" | \"suggestions\";\r\n      content: string;\r\n      options?: any;\r\n    },\r\n    sendResponse: (response: any) => void\r\n  ): Promise<void> {\r\n    const { type, content, options } = payload;\r\n\r\n    let response: AIResponse;\r\n\r\n    switch (type) {\r\n      case \"enhance\":\r\n        // Use the enhanced method with basic enhancement prompt\r\n        response = await this.aiManager.enhance(\r\n          content,\r\n          \"Enhance this content to improve readability, flow, and overall quality while maintaining the original meaning and style.\",\r\n          \"enhance\",\r\n          options\r\n        );\r\n        break;\r\n      case \"summarize\":\r\n        response = await this.aiManager.summarize(content, options);\r\n        break;\r\n      case \"analyze\":\r\n        response = await this.aiManager.analyze(content, options);\r\n        break;\r\n      case \"suggestions\":\r\n        response = await this.aiManager.generateSuggestions(content, options);\r\n        break;\r\n      default:\r\n        response = { error: \"Invalid AI request type\" };\r\n    }\r\n\r\n    sendResponse({\r\n      response,\r\n      provider: this.aiManager.getCurrentProvider(),\r\n      success: !response.error,\r\n    });\r\n  }\r\n\r\n  private async handleGetAvailableModels(\r\n    payload: { providerId?: string },\r\n    sendResponse: (response: any) => void\r\n  ): Promise<void> {\r\n    try {\r\n      const { providerId } = payload;\r\n\r\n      if (providerId) {\r\n        const models = this.aiManager.getAvailableModels(providerId);\r\n        sendResponse({ success: true, models });\r\n      } else {\r\n        const allModels = this.aiManager.getAllAvailableModels();\r\n        sendResponse({ success: true, models: allModels });\r\n      }\r\n    } catch (error) {\r\n      sendResponse({\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n      });\r\n    }\r\n  }\r\n\r\n  private async handleGetSettings(\r\n    sendResponse: (response: any) => void\r\n  ): Promise<void> {\r\n    const settings = await StorageManager.getSettings();\r\n    const providers = this.aiManager.getAvailableProviders();\r\n    const handlers = this.handlerManager.getAllHandlers();\r\n\r\n    sendResponse({\r\n      settings,\r\n      providers,\r\n      handlers,\r\n      success: true,\r\n    });\r\n  }\r\n\r\n  private async handleUpdateSettings(\r\n    payload: any,\r\n    sendResponse: (response: any) => void\r\n  ): Promise<void> {\r\n    const success = await StorageManager.saveSettings(payload);\r\n\r\n    if (success) {\r\n      // Reinitialize services with new settings\r\n      const settings = await StorageManager.getSettings();\r\n      await this.aiManager.loadSettingsAndInitialize(settings);\r\n      this.handlerManager.updateHandlerSettings(settings.enabledHandlers);\r\n    }\r\n\r\n    sendResponse({ success });\r\n  }\r\n}\r\n\r\n// Initialize the background service\r\nnew BackgroundService();\r\n"],"names":["inProgress","dataWebpackPrefix","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","f","e","chunkId","Promise","all","keys","reduce","promises","u","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","call","l","url","done","push","script","needAttach","scripts","document","getElementsByTagName","i","length","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","forEach","fn","setTimeout","bind","type","target","head","appendChild","scriptUrl","importScripts","location","currentScript","tagName","toUpperCase","test","Error","replace","p","installedChunks","j","installedChunkData","promise","resolve","reject","error","errorType","realSrc","message","name","request","webpackJsonpCallback","parentChunkLoadingFunction","data","chunkIds","moreModules","runtime","some","id","chunkLoadingGlobal","self","BaseAIService","apiKey","constructor","setApiKey","validateApiKey","provider","requiresAuth","makeRequest","options","response","fetch","ok","status","json","console","WordCounter","countWords","text","cleanText","trim","split","filter","word","countCharacters","calculateStats","originalText","enhancedText","originalWords","enhancedWords","wordsChanged","percentageChange","charactersOriginal","charactersEnhanced","Math","round","formatWordCount","count","toString","toFixed","formatPercentageChange","percentage","formatWordChange","change","abs","getReadingTime","wordCount","minutes","hours","floor","remainingMinutes","extractContentWordCount","element","clone","cloneNode","selector","querySelectorAll","el","remove","textContent","GeminiService","apiEndpoint","authType","features","summarize","content","prompt","method","headers","body","JSON","stringify","contents","parts","summary","candidates","analyze","analysis","generateSuggestions","suggestions","line","enhance","startTime","Date","now","generationConfig","maxOutputTokens","temperature","enhancedContent","enhanced","processingTime","stats","OpenAIService","Authorization","model","messages","role","max_tokens","choices","includes","HuggingFaceService","inputs","substring","parameters","max_length","min_length","summary_text","sentiment","label","score","ceil","AnthropicService","OpenRouterService","RateLimiter","Map","canMakeRequest","tokenCount","tracker","getTracker","lastRequest","requestCount","rateLimitRPM","rateLimitTPM","nextAvailableTime","recordRequest","requestInterval","max","getWaitTime","waitForRateLimit","waitTime","log","modelId","trackers","has","set","clearTrackers","clear","getTrackers","Array","from","values","ContentSegmenter","maxChunkSize","preserveImages","preserveFormatting","overlapSize","segmentContent","opts","DEFAULT_OPTIONS","segments","imagePositions","extractImages","workingContent","imagePlaceholders","img","index","placeholder","originalTag","splitBySize","segment","segmentImages","imgIndex","originalImage","position","indexOf","startIndex","endIndex","reassembleSegments","sortedSegments","sort","a","b","reassembled","lastEndIndex","overlapStart","images","imgRegex","match","exec","imgTag","srcMatch","altMatch","titleMatch","alt","title","maxSize","currentIndex","min","segmentEnd","searchStart","lastSentence","findLastSentenceBreak","start","end","searchContent","lastBreak","breakStr","lastIndexOf","ContentType","NOVEL","ARTICLE","NEWS","TECHNICAL","GENERIC","AI_MODELS","gemini","maxTokens","openai","anthropic","huggingface","openrouter","AIServiceManager","services","currentService","currentSettings","initializeServices","service","getAvailableProviders","map","getAvailableModels","providerId","getAllAvailableModels","result","setActiveProvider","getCurrentProvider","featureType","selectedModels","getModelById","enhanceWithSegmentation","enhanceSingleContent","enhancedSegments","totalProcessingTime","hasError","errorMessage","rateLimiting","enabled","segmentPrompt","find","loadSettingsAndInitialize","settings","selectedProvider","apiKeys","providers","fanfictionHandler","domains","selectors","author","chapter","next","previous","isEnabled","priority","archiveOfOurOwnHandler","royalRoadHandler","webnovelHandler","geeksForGeeksHandler","mediumHandler","genericNewsHandler","SiteHandlerManager","handlers","enabledHandlers","Set","initializeHandlers","handler","add","getHandlers","getAllHandlers","getHandlerForDomain","domain","handlerDomain","enableHandler","handlerName","h","disableHandler","delete","isHandlerEnabled","updateHandlerSettings","addCustomHandler","existingIndex","findIndex","removeHandler","splice","StorageManager","enabledFeatures","theme","customPrompts","enhancement","permanent","website","novel","autoDetectContentType","showWordCount","showProcessingBanner","retryAttempts","getSettings","stored","chrome","storage","sync","STORAGE_KEY","DEFAULT_SETTINGS","saveSettings","updatedSettings","updateApiKey","removeApiKey","setSelectedProvider","setSelectedModel","updatedModels","setSelectedModels","models","setCustomPrompt","promptType","promptKey","promptValue","currentPrompts","updatedPrompts","removeCustomPrompt","setRateLimitingSettings","updatedRateLimiting","setContentDetectionSettings","toggleFeature","feature","toggleHandler","clearAllData","onSettingsChanged","callback","onChanged","addListener","changes","area","newSettings","newValue","aiManager","handlerManager","init","onMessage","sender","sendResponse","handleMessage","async","handleAnalyzeContent","payload","handleGetAIResponse","handleGetAvailableModels","handleGetSettings","handleUpdateSettings","URL","hostname","ContentDetector","analyzeContent","success"],"sourceRoot":""}